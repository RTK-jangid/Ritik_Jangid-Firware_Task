
Ritik_Jangid_Firmware_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002594  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002724  08002724  00003724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002764  08002764  0000407c  2**0
                  CONTENTS
  4 .ARM          00000008  08002764  08002764  00003764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800276c  0800276c  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800276c  0800276c  0000376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002770  08002770  00003770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08002774  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000407c  2**0
                  CONTENTS
 10 .bss          00000198  2000007c  2000007c  0000407c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000214  20000214  0000407c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002269  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000095e  00000000  00000000  00006315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d0  00000000  00000000  00006c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000205  00000000  00000000  00006f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037c0  00000000  00000000  0000714d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003632  00000000  00000000  0000a90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bc10  00000000  00000000  0000df3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00019b4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001240  00000000  00000000  00019b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0001add4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800270c 	.word	0x0800270c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800270c 	.word	0x0800270c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <delay>:
uint8_t rx_buf[2] ={0};
uint8_t rcv_set =RESET;
uint8_t *ptr = (uint8_t*)FLASH_SECTOR7_BASEADDR;
uint8_t finish[2]="\n";

void delay(void){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	for(int i=0;i<5000000;i++);
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e002      	b.n	8000282 <delay+0x12>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a04      	ldr	r2, [pc, #16]	@ (8000298 <delay+0x28>)
 8000286:	4293      	cmp	r3, r2
 8000288:	ddf8      	ble.n	800027c <delay+0xc>
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	004c4b3f 	.word	0x004c4b3f

0800029c <USART1_inits>:
//}


USART_Handle_t usart1;

void USART1_inits(USART_Handle_t *pUSARTHandle){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

	pUSARTHandle->pUARTx = USART1_REG;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a10      	ldr	r2, [pc, #64]	@ (80002e8 <USART1_inits+0x4c>)
 80002a8:	601a      	str	r2, [r3, #0]

	pUSARTHandle->USARTConfig.BAUD=USART_STD_BAUD_2400;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80002b0:	609a      	str	r2, [r3, #8]
	pUSARTHandle->USARTConfig.HW_Flow_Ctrl=USART_HW_FLOW_CTRL_NONE;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	739a      	strb	r2, [r3, #14]
	pUSARTHandle->USARTConfig.Mode=USART_MODE_TXRX;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2202      	movs	r2, #2
 80002bc:	711a      	strb	r2, [r3, #4]
	pUSARTHandle->USARTConfig.Parity_Ctrl=USART_PARITY_DISABLE;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	735a      	strb	r2, [r3, #13]
	pUSARTHandle->USARTConfig.No_of_Stop_Bits=USART_STOPBITS_1;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2200      	movs	r2, #0
 80002c8:	731a      	strb	r2, [r3, #12]
	pUSARTHandle->USARTConfig.WordLength=USART_WORDLEN_8BITS;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	73da      	strb	r2, [r3, #15]

	USART_IRQInterruptConfig(USART1_IRQ_NO, ENABLE);
 80002d0:	2101      	movs	r1, #1
 80002d2:	2025      	movs	r0, #37	@ 0x25
 80002d4:	f000 ff94 	bl	8001200 <USART_IRQInterruptConfig>

	USART_Init(&usart1);
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <USART1_inits+0x50>)
 80002da:	f000 fe18 	bl	8000f0e <USART_Init>
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40011000 	.word	0x40011000
 80002ec:	2000009c 	.word	0x2000009c

080002f0 <GPIO_INITs>:


void GPIO_INITs(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpioB;

	gpioB.pGPIOx=GPIOB_REG;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <GPIO_INITs+0x40>)
 80002f8:	607b      	str	r3, [r7, #4]

	gpioB.GPIO_PinConfig.PinMode=GPIO_MODE_ALTFUN;
 80002fa:	2302      	movs	r3, #2
 80002fc:	727b      	strb	r3, [r7, #9]
	gpioB.GPIO_PinConfig.PinAltFunMode=7;
 80002fe:	2307      	movs	r3, #7
 8000300:	737b      	strb	r3, [r7, #13]
	gpioB.GPIO_PinConfig.PinOPType=GPIO_OP_TYPE_PP;
 8000302:	2300      	movs	r3, #0
 8000304:	733b      	strb	r3, [r7, #12]
	gpioB.GPIO_PinConfig.PinPuPdControl=GPIO_PU;
 8000306:	2301      	movs	r3, #1
 8000308:	72fb      	strb	r3, [r7, #11]
	gpioB.GPIO_PinConfig.PinSpeed=GPIO_OSPEED_MED;
 800030a:	2301      	movs	r3, #1
 800030c:	72bb      	strb	r3, [r7, #10]

	//Tx
	gpioB.GPIO_PinConfig.PinNumber=GPIO_PIN_NO_6;
 800030e:	2306      	movs	r3, #6
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_init(&gpioB);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fb7f 	bl	8000a18 <GPIO_init>

	//Rx
	gpioB.GPIO_PinConfig.PinNumber=GPIO_PIN_NO_7;
 800031a:	2307      	movs	r3, #7
 800031c:	723b      	strb	r3, [r7, #8]
	GPIO_init(&gpioB);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fb79 	bl	8000a18 <GPIO_init>


    /* Loop forever */

}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40020400 	.word	0x40020400

08000334 <main>:


int main(){
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0

	delay();
 800033a:	f7ff ff99 	bl	8000270 <delay>
	Flash_Erase_Sector7();
 800033e:	f000 fa13 	bl	8000768 <Flash_Erase_Sector7>


	GPIO_INITs();
 8000342:	f7ff ffd5 	bl	80002f0 <GPIO_INITs>

	USART1_inits(&usart1);
 8000346:	4820      	ldr	r0, [pc, #128]	@ (80003c8 <main+0x94>)
 8000348:	f7ff ffa8 	bl	800029c <USART1_inits>

	USART_PeripheralControl(&usart1, ENABLE);
 800034c:	2101      	movs	r1, #1
 800034e:	481e      	ldr	r0, [pc, #120]	@ (80003c8 <main+0x94>)
 8000350:	f000 fda8 	bl	8000ea4 <USART_PeripheralControl>
	FLash_Unlock();
 8000354:	f000 f9c6 	bl	80006e4 <FLash_Unlock>
	Flash_OB_Unlock();
 8000358:	f000 f9ec 	bl	8000734 <Flash_OB_Unlock>

	printf("Ready\n\n");
 800035c:	481b      	ldr	r0, [pc, #108]	@ (80003cc <main+0x98>)
 800035e:	f001 fb3d 	bl	80019dc <puts>
	while(rx_buf[0] != 13){
 8000362:	e010      	b.n	8000386 <main+0x52>
		while(USART_ReceiveDataIT(&usart1,rx_buf ,1) != USART_READY);
 8000364:	bf00      	nop
 8000366:	2201      	movs	r2, #1
 8000368:	4919      	ldr	r1, [pc, #100]	@ (80003d0 <main+0x9c>)
 800036a:	4817      	ldr	r0, [pc, #92]	@ (80003c8 <main+0x94>)
 800036c:	f000 ff1e 	bl	80011ac <USART_ReceiveDataIT>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1f7      	bne.n	8000366 <main+0x32>

		while(rcv_set == RESET);
 8000376:	bf00      	nop
 8000378:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <main+0xa0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0fb      	beq.n	8000378 <main+0x44>
		rcv_set =RESET;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <main+0xa0>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
	while(rx_buf[0] != 13){
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <main+0x9c>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b0d      	cmp	r3, #13
 800038c:	d1ea      	bne.n	8000364 <main+0x30>

	}
	Flash_Lock();
 800038e:	f000 f999 	bl	80006c4 <Flash_Lock>
	Flash_OB_Lock();
 8000392:	f000 f9bf 	bl	8000714 <Flash_OB_Lock>
	printf("\n");
 8000396:	200a      	movs	r0, #10
 8000398:	f001 fac2 	bl	8001920 <putchar>
//	delay();
	uint8_t *ptr1 = (uint8_t*)FLASH_SECTOR7_BASEADDR;
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <main+0xa4>)
 800039e:	607b      	str	r3, [r7, #4]
	while(*ptr1 != 13){
 80003a0:	e007      	b.n	80003b2 <main+0x7e>
		USART_SendData(&usart1, ptr1, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	6879      	ldr	r1, [r7, #4]
 80003a6:	4808      	ldr	r0, [pc, #32]	@ (80003c8 <main+0x94>)
 80003a8:	f000 feb0 	bl	800110c <USART_SendData>
		ptr1++;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
	while(*ptr1 != 13){
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b0d      	cmp	r3, #13
 80003b8:	d1f3      	bne.n	80003a2 <main+0x6e>
	}

	USART_SendData(&usart1, finish, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	4907      	ldr	r1, [pc, #28]	@ (80003dc <main+0xa8>)
 80003be:	4802      	ldr	r0, [pc, #8]	@ (80003c8 <main+0x94>)
 80003c0:	f000 fea4 	bl	800110c <USART_SendData>
	while(1);
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <main+0x90>
 80003c8:	2000009c 	.word	0x2000009c
 80003cc:	08002724 	.word	0x08002724
 80003d0:	20000098 	.word	0x20000098
 80003d4:	2000009a 	.word	0x2000009a
 80003d8:	08060000 	.word	0x08060000
 80003dc:	20000004 	.word	0x20000004

080003e0 <USART1_IRQHandler>:
	return 0;
}



void USART1_IRQHandler(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

	USART_IRQHandling(&usart1);
 80003e4:	4802      	ldr	r0, [pc, #8]	@ (80003f0 <USART1_IRQHandler+0x10>)
 80003e6:	f000 ff91 	bl	800130c <USART_IRQHandling>

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	2000009c 	.word	0x2000009c

080003f4 <USART_EventCallBack>:

void USART_EventCallBack(USART_Handle_t *pUSARTHandle , uint8_t AppEv){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
	if (AppEv == USART_TX_COMPLT){
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d016      	beq.n	8000434 <USART_EventCallBack+0x40>
//		rcv_set=SET;
	}else if(AppEv == USART_RX_COMPLT){
 8000406:	78fb      	ldrb	r3, [r7, #3]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d113      	bne.n	8000434 <USART_EventCallBack+0x40>
		Flash_program_BYTE(ptr, rx_buf[0]);
 800040c:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <USART_EventCallBack+0x48>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a0b      	ldr	r2, [pc, #44]	@ (8000440 <USART_EventCallBack+0x4c>)
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	4611      	mov	r1, r2
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f9e8 	bl	80007ec <Flash_program_BYTE>
		ptr++;
 800041c:	4b07      	ldr	r3, [pc, #28]	@ (800043c <USART_EventCallBack+0x48>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	4a06      	ldr	r2, [pc, #24]	@ (800043c <USART_EventCallBack+0x48>)
 8000424:	6013      	str	r3, [r2, #0]

		rcv_set=SET;
 8000426:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <USART_EventCallBack+0x50>)
 8000428:	2201      	movs	r2, #1
 800042a:	701a      	strb	r2, [r3, #0]
		printf("%s",rx_buf);
 800042c:	4904      	ldr	r1, [pc, #16]	@ (8000440 <USART_EventCallBack+0x4c>)
 800042e:	4806      	ldr	r0, [pc, #24]	@ (8000448 <USART_EventCallBack+0x54>)
 8000430:	f001 fa64 	bl	80018fc <iprintf>


	}

}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000000 	.word	0x20000000
 8000440:	20000098 	.word	0x20000098
 8000444:	2000009a 	.word	0x2000009a
 8000448:	0800272c 	.word	0x0800272c

0800044c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <ITM_SendChar+0x48>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <ITM_SendChar+0x48>)
 800045c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000460:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000462:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <ITM_SendChar+0x4c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a0c      	ldr	r2, [pc, #48]	@ (8000498 <ITM_SendChar+0x4c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800046e:	bf00      	nop
 8000470:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f8      	beq.n	8000470 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800047e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	6013      	str	r3, [r2, #0]
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	e000edfc 	.word	0xe000edfc
 8000498:	e0000e00 	.word	0xe0000e00

0800049c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e00a      	b.n	80004c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ae:	f3af 8000 	nop.w
 80004b2:	4601      	mov	r1, r0
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	60ba      	str	r2, [r7, #8]
 80004ba:	b2ca      	uxtb	r2, r1
 80004bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	3301      	adds	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	dbf0      	blt.n	80004ae <_read+0x12>
  }

  return len;
 80004cc:	687b      	ldr	r3, [r7, #4]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b086      	sub	sp, #24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	60f8      	str	r0, [r7, #12]
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e009      	b.n	80004fc <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	1c5a      	adds	r2, r3, #1
 80004ec:	60ba      	str	r2, [r7, #8]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ffab 	bl	800044c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697a      	ldr	r2, [r7, #20]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf1      	blt.n	80004e8 <_write+0x12>
  }
  return len;
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <_close>:

int _close(int file)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000536:	605a      	str	r2, [r3, #4]
  return 0;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <_isatty>:

int _isatty(int file)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000580:	4a14      	ldr	r2, [pc, #80]	@ (80005d4 <_sbrk+0x5c>)
 8000582:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <_sbrk+0x60>)
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000594:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <_sbrk+0x64>)
 8000596:	4a12      	ldr	r2, [pc, #72]	@ (80005e0 <_sbrk+0x68>)
 8000598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d207      	bcs.n	80005b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a8:	f001 fb46 	bl	8001c38 <__errno>
 80005ac:	4603      	mov	r3, r0
 80005ae:	220c      	movs	r2, #12
 80005b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b6:	e009      	b.n	80005cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005be:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <_sbrk+0x64>)
 80005c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ca:	68fb      	ldr	r3, [r7, #12]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20020000 	.word	0x20020000
 80005d8:	00000400 	.word	0x00000400
 80005dc:	200000c4 	.word	0x200000c4
 80005e0:	20000218 	.word	0x20000218

080005e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	@ (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	@ (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000612:	f001 fb17 	bl	8001c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fe8d 	bl	8000334 <main>

0800061a <LoopForever>:

LoopForever:
  b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   r0, =_estack
 800061c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000628:	08002774 	.word	0x08002774
  ldr r2, =_sbss
 800062c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000630:	20000214 	.word	0x20000214

08000634 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <Flash_flushcache>:
 */

#include "stm32f407_FLASH_drivers.h"


static void Flash_flushcache(void){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	if ((FLASH_REG->ACR & (1<<FLASH_ACR_ICEN)) != RESET)
 800063c:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <Flash_flushcache+0x88>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000644:	2b00      	cmp	r3, #0
 8000646:	d017      	beq.n	8000678 <Flash_flushcache+0x40>
	{
		FLASH_REG->ACR &= ~(1<<FLASH_ACR_ICEN);
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <Flash_flushcache+0x88>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <Flash_flushcache+0x88>)
 800064e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000652:	6013      	str	r3, [r2, #0]
		FLASH_REG->ACR |= (1<<FLASH_ACR_ICRST);
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <Flash_flushcache+0x88>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a19      	ldr	r2, [pc, #100]	@ (80006c0 <Flash_flushcache+0x88>)
 800065a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800065e:	6013      	str	r3, [r2, #0]
		FLASH_REG->ACR &= ~(1<<FLASH_ACR_ICRST);
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <Flash_flushcache+0x88>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a16      	ldr	r2, [pc, #88]	@ (80006c0 <Flash_flushcache+0x88>)
 8000666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800066a:	6013      	str	r3, [r2, #0]
		FLASH_REG->ACR |= (1<<FLASH_ACR_ICEN);
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <Flash_flushcache+0x88>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <Flash_flushcache+0x88>)
 8000672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000676:	6013      	str	r3, [r2, #0]
	}


	if ((FLASH_REG->ACR & (1<<FLASH_ACR_DCEN)) != RESET)
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <Flash_flushcache+0x88>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000680:	2b00      	cmp	r3, #0
 8000682:	d017      	beq.n	80006b4 <Flash_flushcache+0x7c>
	{
		FLASH_REG->ACR &= ~(1<<FLASH_ACR_DCEN);
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <Flash_flushcache+0x88>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <Flash_flushcache+0x88>)
 800068a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800068e:	6013      	str	r3, [r2, #0]
		FLASH_REG->ACR |= (1<<FLASH_ACR_DCRST);
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <Flash_flushcache+0x88>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <Flash_flushcache+0x88>)
 8000696:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800069a:	6013      	str	r3, [r2, #0]
		FLASH_REG->ACR &= ~(1<<FLASH_ACR_DCRST);
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <Flash_flushcache+0x88>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <Flash_flushcache+0x88>)
 80006a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006a6:	6013      	str	r3, [r2, #0]
		FLASH_REG->ACR |= (1<<FLASH_ACR_DCEN);
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <Flash_flushcache+0x88>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <Flash_flushcache+0x88>)
 80006ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006b2:	6013      	str	r3, [r2, #0]
	}
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023c00 	.word	0x40023c00

080006c4 <Flash_Lock>:

void Flash_Lock(void){
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	FLASH_REG->CR |= (1<<FLASH_CR_LOCK);
 80006c8:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <Flash_Lock+0x1c>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <Flash_Lock+0x1c>)
 80006ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d2:	6113      	str	r3, [r2, #16]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023c00 	.word	0x40023c00

080006e4 <FLash_Unlock>:
void FLash_Unlock(void){
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	if((FLASH_REG->CR & (1<<FLASH_CR_LOCK))  != RESET){
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <FLash_Unlock+0x24>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da05      	bge.n	80006fc <FLash_Unlock+0x18>
		FLASH_REG->KEYR = FLASH_KEY1;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <FLash_Unlock+0x24>)
 80006f2:	4a06      	ldr	r2, [pc, #24]	@ (800070c <FLash_Unlock+0x28>)
 80006f4:	605a      	str	r2, [r3, #4]
		FLASH_REG->KEYR = FLASH_KEY2;
 80006f6:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <FLash_Unlock+0x24>)
 80006f8:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <FLash_Unlock+0x2c>)
 80006fa:	605a      	str	r2, [r3, #4]
	}

}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023c00 	.word	0x40023c00
 800070c:	45670123 	.word	0x45670123
 8000710:	cdef89ab 	.word	0xcdef89ab

08000714 <Flash_OB_Lock>:
void Flash_OB_Lock(void){
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	FLASH_REG->OPTCR |= (1<<FLASH_OPT_OPTLOCK);
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <Flash_OB_Lock+0x1c>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	4a04      	ldr	r2, [pc, #16]	@ (8000730 <Flash_OB_Lock+0x1c>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6153      	str	r3, [r2, #20]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023c00 	.word	0x40023c00

08000734 <Flash_OB_Unlock>:
void Flash_OB_Unlock(void){
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	if((FLASH_REG->OPTCR & (1<<FLASH_OPT_OPTLOCK))  != RESET){
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <Flash_OB_Unlock+0x28>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d005      	beq.n	8000750 <Flash_OB_Unlock+0x1c>
		FLASH_REG->OPTKEYR = FLASH_OPT_KEY1;
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <Flash_OB_Unlock+0x28>)
 8000746:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <Flash_OB_Unlock+0x2c>)
 8000748:	609a      	str	r2, [r3, #8]
		FLASH_REG->OPTKEYR = FLASH_OPT_KEY2;
 800074a:	4b04      	ldr	r3, [pc, #16]	@ (800075c <Flash_OB_Unlock+0x28>)
 800074c:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <Flash_OB_Unlock+0x30>)
 800074e:	609a      	str	r2, [r3, #8]
	}
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023c00 	.word	0x40023c00
 8000760:	08192a3b 	.word	0x08192a3b
 8000764:	4c5d6e7f 	.word	0x4c5d6e7f

08000768 <Flash_Erase_Sector7>:

void Flash_Erase_Sector7(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	FLash_Unlock();
 800076c:	f7ff ffba 	bl	80006e4 <FLash_Unlock>
	Flash_OB_Unlock();
 8000770:	f7ff ffe0 	bl	8000734 <Flash_OB_Unlock>
	while((FLASH_REG->SR & (1<<FLASH_SR_BSY)) != RESET);
 8000774:	bf00      	nop
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f9      	bne.n	8000776 <Flash_Erase_Sector7+0xe>

	FLASH_REG->CR &= ~(3<<FLASH_CR_PSIZE);
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	4a18      	ldr	r2, [pc, #96]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 8000788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800078c:	6113      	str	r3, [r2, #16]
	FLASH_REG->CR |= (3<<FLASH_CR_PSIZE);
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4a15      	ldr	r2, [pc, #84]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 8000794:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000798:	6113      	str	r3, [r2, #16]
	FLASH_REG->CR &= ~(0x1f<<FLASH_CR_SNB);
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 80007a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80007a4:	6113      	str	r3, [r2, #16]
	FLASH_REG->CR |= (1<<FLASH_CR_SER) | (7 << FLASH_CR_SNB);
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	4a0f      	ldr	r2, [pc, #60]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 80007ac:	f043 033a 	orr.w	r3, r3, #58	@ 0x3a
 80007b0:	6113      	str	r3, [r2, #16]
	FLASH_REG->CR |= (1<<FLASH_CR_STRT);
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 80007b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007bc:	6113      	str	r3, [r2, #16]

	while((FLASH_REG->SR & (1<<FLASH_SR_BSY)) != RESET);
 80007be:	bf00      	nop
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f9      	bne.n	80007c0 <Flash_Erase_Sector7+0x58>

	FLASH_REG->CR &= ~((1<<FLASH_CR_SER) | (0x1f<<FLASH_CR_SNB));
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <Flash_Erase_Sector7+0x80>)
 80007d2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80007d6:	6113      	str	r3, [r2, #16]

	Flash_flushcache();
 80007d8:	f7ff ff2e 	bl	8000638 <Flash_flushcache>
	Flash_OB_Lock();
 80007dc:	f7ff ff9a 	bl	8000714 <Flash_OB_Lock>
	Flash_Lock();
 80007e0:	f7ff ff70 	bl	80006c4 <Flash_Lock>


}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023c00 	.word	0x40023c00

080007ec <Flash_program_BYTE>:
			read_cnt += 4;
		}
	}while(read_data != 0xFFFFFFFF);
}

void Flash_program_BYTE(uint8_t *Address , uint8_t data){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]

	FLASH_REG->CR &= ~(3<<FLASH_CR_PSIZE);
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <Flash_program_BYTE+0x58>)
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	4a11      	ldr	r2, [pc, #68]	@ (8000844 <Flash_program_BYTE+0x58>)
 80007fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000802:	6113      	str	r3, [r2, #16]
	FLASH_REG->CR |= 0;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <Flash_program_BYTE+0x58>)
 8000806:	4a0f      	ldr	r2, [pc, #60]	@ (8000844 <Flash_program_BYTE+0x58>)
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	6113      	str	r3, [r2, #16]
	FLASH_REG->CR |= (1<<FLASH_CR_PG);
 800080c:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <Flash_program_BYTE+0x58>)
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	4a0c      	ldr	r2, [pc, #48]	@ (8000844 <Flash_program_BYTE+0x58>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	6113      	str	r3, [r2, #16]

	*Address = data;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	78fa      	ldrb	r2, [r7, #3]
 800081c:	701a      	strb	r2, [r3, #0]
	while((FLASH_REG->SR & (1<<FLASH_SR_BSY)) != RESET);
 800081e:	bf00      	nop
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <Flash_program_BYTE+0x58>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f9      	bne.n	8000820 <Flash_program_BYTE+0x34>

	FLASH_REG->CR &= ~(1<<FLASH_CR_PG);
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <Flash_program_BYTE+0x58>)
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <Flash_program_BYTE+0x58>)
 8000832:	f023 0301 	bic.w	r3, r3, #1
 8000836:	6113      	str	r3, [r2, #16]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40023c00 	.word	0x40023c00

08000848 <GPIO_PeriClockControl>:


#include "stm32f407_GPIOx_drivers.h"


void GPIO_PeriClockControl(GPIOx_Reg_t *pGPIOx, uint8_t EnorDi){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]

	if(EnorDi){
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d062      	beq.n	8000920 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx==GPIOA_REG){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a64      	ldr	r2, [pc, #400]	@ (80009f0 <GPIO_PeriClockControl+0x1a8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <GPIO_PeriClockControl+0x28>
//			printf("%p \n",pGPIOx->MODER);
			GPIOA_PCLK_EN();
 8000862:	4b64      	ldr	r3, [pc, #400]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a63      	ldr	r2, [pc, #396]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
			RCC_REG->AHB1ENR &= ~(1<<8);
		}
	}


}
 800086e:	e0b9      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOB_REG){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a61      	ldr	r2, [pc, #388]	@ (80009f8 <GPIO_PeriClockControl+0x1b0>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <GPIO_PeriClockControl+0x3e>
			RCC_REG->AHB1ENR |= (1<<1);
 8000878:	4b5e      	ldr	r3, [pc, #376]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087c:	4a5d      	ldr	r2, [pc, #372]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000884:	e0ae      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOC_REG){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a5c      	ldr	r2, [pc, #368]	@ (80009fc <GPIO_PeriClockControl+0x1b4>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d106      	bne.n	800089c <GPIO_PeriClockControl+0x54>
			RCC_REG->AHB1ENR |= (1<<2);
 800088e:	4b59      	ldr	r3, [pc, #356]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a58      	ldr	r2, [pc, #352]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800089a:	e0a3      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOD_REG){
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a58      	ldr	r2, [pc, #352]	@ (8000a00 <GPIO_PeriClockControl+0x1b8>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d106      	bne.n	80008b2 <GPIO_PeriClockControl+0x6a>
			RCC_REG->AHB1ENR |= (1<<3);
 80008a4:	4b53      	ldr	r3, [pc, #332]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a8:	4a52      	ldr	r2, [pc, #328]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008b0:	e098      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOE_REG){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a53      	ldr	r2, [pc, #332]	@ (8000a04 <GPIO_PeriClockControl+0x1bc>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <GPIO_PeriClockControl+0x80>
			RCC_REG->AHB1ENR |= (1<<4);
 80008ba:	4b4e      	ldr	r3, [pc, #312]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a4d      	ldr	r2, [pc, #308]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008c6:	e08d      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOF_REG){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a4f      	ldr	r2, [pc, #316]	@ (8000a08 <GPIO_PeriClockControl+0x1c0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <GPIO_PeriClockControl+0x96>
			RCC_REG->AHB1ENR |= (1<<5);
 80008d0:	4b48      	ldr	r3, [pc, #288]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d4:	4a47      	ldr	r2, [pc, #284]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008dc:	e082      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOG_REG){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a4a      	ldr	r2, [pc, #296]	@ (8000a0c <GPIO_PeriClockControl+0x1c4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <GPIO_PeriClockControl+0xac>
			RCC_REG->AHB1ENR |= (1<<6);
 80008e6:	4b43      	ldr	r3, [pc, #268]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a42      	ldr	r2, [pc, #264]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008f2:	e077      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOH_REG){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a46      	ldr	r2, [pc, #280]	@ (8000a10 <GPIO_PeriClockControl+0x1c8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d106      	bne.n	800090a <GPIO_PeriClockControl+0xc2>
			RCC_REG->AHB1ENR |= (1<<7);
 80008fc:	4b3d      	ldr	r3, [pc, #244]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000900:	4a3c      	ldr	r2, [pc, #240]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000906:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000908:	e06c      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOI_REG){
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a41      	ldr	r2, [pc, #260]	@ (8000a14 <GPIO_PeriClockControl+0x1cc>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d168      	bne.n	80009e4 <GPIO_PeriClockControl+0x19c>
			RCC_REG->AHB1ENR |= (1<<8);
 8000912:	4b38      	ldr	r3, [pc, #224]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a37      	ldr	r2, [pc, #220]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800091e:	e061      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx==GPIOA_REG){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a33      	ldr	r2, [pc, #204]	@ (80009f0 <GPIO_PeriClockControl+0x1a8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d106      	bne.n	8000936 <GPIO_PeriClockControl+0xee>
			RCC_REG->AHB1ENR &= ~(1<<0);
 8000928:	4b32      	ldr	r3, [pc, #200]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092c:	4a31      	ldr	r2, [pc, #196]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000934:	e056      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOB_REG){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a2f      	ldr	r2, [pc, #188]	@ (80009f8 <GPIO_PeriClockControl+0x1b0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <GPIO_PeriClockControl+0x104>
			RCC_REG->AHB1ENR &= ~(1<<1);
 800093e:	4b2d      	ldr	r3, [pc, #180]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a2c      	ldr	r2, [pc, #176]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000944:	f023 0302 	bic.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800094a:	e04b      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOC_REG){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a2b      	ldr	r2, [pc, #172]	@ (80009fc <GPIO_PeriClockControl+0x1b4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d106      	bne.n	8000962 <GPIO_PeriClockControl+0x11a>
			RCC_REG->AHB1ENR &= ~(1<<2);
 8000954:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000958:	4a26      	ldr	r2, [pc, #152]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 800095a:	f023 0304 	bic.w	r3, r3, #4
 800095e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000960:	e040      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOD_REG){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a26      	ldr	r2, [pc, #152]	@ (8000a00 <GPIO_PeriClockControl+0x1b8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d106      	bne.n	8000978 <GPIO_PeriClockControl+0x130>
			RCC_REG->AHB1ENR &= ~(1<<3);
 800096a:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a21      	ldr	r2, [pc, #132]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000970:	f023 0308 	bic.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000976:	e035      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOE_REG){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a22      	ldr	r2, [pc, #136]	@ (8000a04 <GPIO_PeriClockControl+0x1bc>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <GPIO_PeriClockControl+0x146>
			RCC_REG->AHB1ENR &= ~(1<<4);
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	4a1b      	ldr	r2, [pc, #108]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000986:	f023 0310 	bic.w	r3, r3, #16
 800098a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800098c:	e02a      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOF_REG){
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a1d      	ldr	r2, [pc, #116]	@ (8000a08 <GPIO_PeriClockControl+0x1c0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <GPIO_PeriClockControl+0x15c>
			RCC_REG->AHB1ENR &= ~(1<<5);
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a16      	ldr	r2, [pc, #88]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 800099c:	f023 0320 	bic.w	r3, r3, #32
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009a2:	e01f      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOG_REG){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <GPIO_PeriClockControl+0x1c4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d106      	bne.n	80009ba <GPIO_PeriClockControl+0x172>
			RCC_REG->AHB1ENR &= ~(1<<6);
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b0:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80009b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009b8:	e014      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOH_REG){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a14      	ldr	r2, [pc, #80]	@ (8000a10 <GPIO_PeriClockControl+0x1c8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d106      	bne.n	80009d0 <GPIO_PeriClockControl+0x188>
			RCC_REG->AHB1ENR &= ~(1<<7);
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80009c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009ce:	e009      	b.n	80009e4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx==GPIOI_REG){
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <GPIO_PeriClockControl+0x1cc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d105      	bne.n	80009e4 <GPIO_PeriClockControl+0x19c>
			RCC_REG->AHB1ENR &= ~(1<<8);
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009dc:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <GPIO_PeriClockControl+0x1ac>)
 80009de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80009e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40021400 	.word	0x40021400
 8000a0c:	40021800 	.word	0x40021800
 8000a10:	40021c00 	.word	0x40021c00
 8000a14:	40022000 	.word	0x40022000

08000a18 <GPIO_init>:

void GPIO_init(GPIO_Handle_t *pGPIOHandle){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
//	printf("%p \n",pGPIOHandle->pGPIOx->MODER);
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff0e 	bl	8000848 <GPIO_PeriClockControl>
	if (pGPIOHandle->GPIO_PinConfig.PinMode	<= GPIO_MODE_ANALOG	){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	795b      	ldrb	r3, [r3, #5]
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d81f      	bhi.n	8000a74 <GPIO_init+0x5c>
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2103      	movs	r1, #3
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	400a      	ands	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.PinMode << (2*pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	795b      	ldrb	r3, [r3, #5]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	791b      	ldrb	r3, [r3, #4]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4619      	mov	r1, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	e0cb      	b.n	8000c0c <GPIO_init+0x1f4>
	}
	else{
		SYSCFG_ENABLE();
 8000a74:	4b4c      	ldr	r3, [pc, #304]	@ (8000ba8 <GPIO_init+0x190>)
 8000a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a78:	4a4b      	ldr	r2, [pc, #300]	@ (8000ba8 <GPIO_init+0x190>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7e:	6453      	str	r3, [r2, #68]	@ 0x44
		if(pGPIOHandle->GPIO_PinConfig.PinMode==GPIO_MODE_IT_FT){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	795b      	ldrb	r3, [r3, #5]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d117      	bne.n	8000ab8 <GPIO_init+0xa0>
			EXTI_REG->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000a88:	4b48      	ldr	r3, [pc, #288]	@ (8000bac <GPIO_init+0x194>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	7912      	ldrb	r2, [r2, #4]
 8000a90:	4611      	mov	r1, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	408a      	lsls	r2, r1
 8000a96:	43d2      	mvns	r2, r2
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4a44      	ldr	r2, [pc, #272]	@ (8000bac <GPIO_init+0x194>)
 8000a9c:	400b      	ands	r3, r1
 8000a9e:	6093      	str	r3, [r2, #8]
			EXTI_REG->FTRS |= (1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000aa0:	4b42      	ldr	r3, [pc, #264]	@ (8000bac <GPIO_init+0x194>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	7912      	ldrb	r2, [r2, #4]
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	2201      	movs	r2, #1
 8000aac:	408a      	lsls	r2, r1
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8000bac <GPIO_init+0x194>)
 8000ab2:	430b      	orrs	r3, r1
 8000ab4:	60d3      	str	r3, [r2, #12]
 8000ab6:	e035      	b.n	8000b24 <GPIO_init+0x10c>
		}else if (pGPIOHandle->GPIO_PinConfig.PinMode==GPIO_MODE_IT_RT){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d117      	bne.n	8000af0 <GPIO_init+0xd8>
			EXTI_REG->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <GPIO_init+0x194>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	7912      	ldrb	r2, [r2, #4]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	2201      	movs	r2, #1
 8000acc:	408a      	lsls	r2, r1
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a36      	ldr	r2, [pc, #216]	@ (8000bac <GPIO_init+0x194>)
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	6093      	str	r3, [r2, #8]
			EXTI_REG->FTRS &= ~(1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000ad6:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <GPIO_init+0x194>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	7912      	ldrb	r2, [r2, #4]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	408a      	lsls	r2, r1
 8000ae4:	43d2      	mvns	r2, r2
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4a30      	ldr	r2, [pc, #192]	@ (8000bac <GPIO_init+0x194>)
 8000aea:	400b      	ands	r3, r1
 8000aec:	60d3      	str	r3, [r2, #12]
 8000aee:	e019      	b.n	8000b24 <GPIO_init+0x10c>
		}else if (pGPIOHandle->GPIO_PinConfig.PinMode==GPIO_MODE_IT_RFT){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	795b      	ldrb	r3, [r3, #5]
 8000af4:	2b06      	cmp	r3, #6
 8000af6:	d115      	bne.n	8000b24 <GPIO_init+0x10c>
			EXTI_REG->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <GPIO_init+0x194>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	7912      	ldrb	r2, [r2, #4]
 8000b00:	4611      	mov	r1, r2
 8000b02:	2201      	movs	r2, #1
 8000b04:	408a      	lsls	r2, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	4a28      	ldr	r2, [pc, #160]	@ (8000bac <GPIO_init+0x194>)
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	6093      	str	r3, [r2, #8]
			EXTI_REG->FTRS |= (1<<pGPIOHandle->GPIO_PinConfig.PinNumber);
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <GPIO_init+0x194>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	7912      	ldrb	r2, [r2, #4]
 8000b16:	4611      	mov	r1, r2
 8000b18:	2201      	movs	r2, #1
 8000b1a:	408a      	lsls	r2, r1
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <GPIO_init+0x194>)
 8000b20:	430b      	orrs	r3, r1
 8000b22:	60d3      	str	r3, [r2, #12]
		}


		uint8_t temp1 =	(pGPIOHandle->GPIO_PinConfig.PinNumber)/4;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	75fb      	strb	r3, [r7, #23]
		uint8_t temp2 =	(pGPIOHandle->GPIO_PinConfig.PinNumber)%4;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	791b      	ldrb	r3, [r3, #4]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	75bb      	strb	r3, [r7, #22]

		uint8_t portCode = PORT_SELECT_EXTI(pGPIOHandle->pGPIOx);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb0 <GPIO_init+0x198>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d047      	beq.n	8000bd0 <GPIO_init+0x1b8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <GPIO_init+0x19c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d02b      	beq.n	8000ba2 <GPIO_init+0x18a>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb8 <GPIO_init+0x1a0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d024      	beq.n	8000b9e <GPIO_init+0x186>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <GPIO_init+0x1a4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d01d      	beq.n	8000b9a <GPIO_init+0x182>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <GPIO_init+0x1a8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d016      	beq.n	8000b96 <GPIO_init+0x17e>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <GPIO_init+0x1ac>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d00f      	beq.n	8000b92 <GPIO_init+0x17a>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <GPIO_init+0x1b0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d008      	beq.n	8000b8e <GPIO_init+0x176>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <GPIO_init+0x1b4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <GPIO_init+0x172>
 8000b86:	2307      	movs	r3, #7
 8000b88:	e023      	b.n	8000bd2 <GPIO_init+0x1ba>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e021      	b.n	8000bd2 <GPIO_init+0x1ba>
 8000b8e:	2306      	movs	r3, #6
 8000b90:	e01f      	b.n	8000bd2 <GPIO_init+0x1ba>
 8000b92:	2305      	movs	r3, #5
 8000b94:	e01d      	b.n	8000bd2 <GPIO_init+0x1ba>
 8000b96:	2304      	movs	r3, #4
 8000b98:	e01b      	b.n	8000bd2 <GPIO_init+0x1ba>
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e019      	b.n	8000bd2 <GPIO_init+0x1ba>
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	e017      	b.n	8000bd2 <GPIO_init+0x1ba>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e015      	b.n	8000bd2 <GPIO_init+0x1ba>
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40013c00 	.word	0x40013c00
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020c00 	.word	0x40020c00
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40021400 	.word	0x40021400
 8000bc8:	40021800 	.word	0x40021800
 8000bcc:	40021c00 	.word	0x40021c00
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	757b      	strb	r3, [r7, #21]

		SYSCFG_REG->EXTI_CR[temp1] |= (portCode<<(4*temp2));
 8000bd4:	4a58      	ldr	r2, [pc, #352]	@ (8000d38 <GPIO_init+0x320>)
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	3302      	adds	r3, #2
 8000bda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bde:	7d79      	ldrb	r1, [r7, #21]
 8000be0:	7dbb      	ldrb	r3, [r7, #22]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	4953      	ldr	r1, [pc, #332]	@ (8000d38 <GPIO_init+0x320>)
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	4302      	orrs	r2, r0
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		EXTI_REG->IMR |= 1<< pGPIOHandle->GPIO_PinConfig.PinNumber;
 8000bf6:	4b51      	ldr	r3, [pc, #324]	@ (8000d3c <GPIO_init+0x324>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	7912      	ldrb	r2, [r2, #4]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	2201      	movs	r2, #1
 8000c02:	408a      	lsls	r2, r1
 8000c04:	4611      	mov	r1, r2
 8000c06:	4a4d      	ldr	r2, [pc, #308]	@ (8000d3c <GPIO_init+0x324>)
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	6013      	str	r3, [r2, #0]

	}


	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	791b      	ldrb	r3, [r3, #4]
 8000c16:	4619      	mov	r1, r3
 8000c18:	2301      	movs	r3, #1
 8000c1a:	408b      	lsls	r3, r1
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	4619      	mov	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	400a      	ands	r2, r1
 8000c26:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.PinOPType << (pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7a1b      	ldrb	r3, [r3, #8]
 8000c32:	4619      	mov	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	791b      	ldrb	r3, [r3, #4]
 8000c38:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	791b      	ldrb	r3, [r3, #4]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2103      	movs	r1, #3
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	400a      	ands	r2, r1
 8000c62:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	799b      	ldrb	r3, [r3, #6]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	791b      	ldrb	r3, [r3, #4]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	609a      	str	r2, [r3, #8]

	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2103      	movs	r1, #3
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	79db      	ldrb	r3, [r3, #7]
 8000cac:	4619      	mov	r1, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	791b      	ldrb	r3, [r3, #4]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	4619      	mov	r1, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	60da      	str	r2, [r3, #12]

	if (pGPIOHandle->GPIO_PinConfig.PinMode == GPIO_MODE_ALTFUN){
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	795b      	ldrb	r3, [r3, #5]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d132      	bne.n	8000d30 <GPIO_init+0x318>

		uint32_t temp1 = (pGPIOHandle->GPIO_PinConfig.PinNumber % 8);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	613b      	str	r3, [r7, #16]
		uint32_t temp2 = (pGPIOHandle->GPIO_PinConfig.PinNumber / 8);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	791b      	ldrb	r3, [r3, #4]
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->AFR[temp2]	&= ~(0xf << (4*temp1));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	210f      	movs	r1, #15
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4011      	ands	r1, r2
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	3208      	adds	r2, #8
 8000d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp2]	|= (pGPIOHandle->GPIO_PinConfig.PinAltFunMode << (4*temp1));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7a5b      	ldrb	r3, [r3, #9]
 8000d16:	4619      	mov	r1, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	4619      	mov	r1, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4311      	orrs	r1, r2
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40013c00 	.word	0x40013c00

08000d40 <Clear_OVR_IDLE_FLAG>:

#include "stm32f407_USART_drivers.h"

static void Clear_OVR_IDLE_FLAG(USART_Handle_t *pUSARTHandle){
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint32_t dummyread;
	dummyread = pUSARTHandle->pUARTx->SR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
	dummyread = pUSARTHandle->pUARTx->DR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	60fb      	str	r3, [r7, #12]
	(void)dummyread;
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <USART_PeriClockControl>:
void USART_PeriClockControl(USARTx_Reg_t *pUSARTx,uint8_t EnorDi){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE){
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d141      	bne.n	8000dfa <USART_PeriClockControl+0x96>
		if(pUSARTx==USART1_REG){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a43      	ldr	r2, [pc, #268]	@ (8000e88 <USART_PeriClockControl+0x124>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d106      	bne.n	8000d8c <USART_PeriClockControl+0x28>
			USART1_ENABLE();
 8000d7e:	4b43      	ldr	r3, [pc, #268]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	4a42      	ldr	r2, [pc, #264]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000d84:	f043 0310 	orr.w	r3, r3, #16
 8000d88:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if(pUSARTx==USART6_REG){
			((RCC_REG -> APB2ENR) &= ~(1<<5));

		}
	}
}
 8000d8a:	e077      	b.n	8000e7c <USART_PeriClockControl+0x118>
		else if(pUSARTx==USART2_REG){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <USART_PeriClockControl+0x12c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d106      	bne.n	8000da2 <USART_PeriClockControl+0x3e>
			USART2_ENABLE();
 8000d94:	4b3d      	ldr	r3, [pc, #244]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	4a3c      	ldr	r2, [pc, #240]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000da0:	e06c      	b.n	8000e7c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART3_REG){
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a3b      	ldr	r2, [pc, #236]	@ (8000e94 <USART_PeriClockControl+0x130>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d106      	bne.n	8000db8 <USART_PeriClockControl+0x54>
			USART3_ENABLE();
 8000daa:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a37      	ldr	r2, [pc, #220]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000db6:	e061      	b.n	8000e7c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==UART4_REG){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a37      	ldr	r2, [pc, #220]	@ (8000e98 <USART_PeriClockControl+0x134>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d106      	bne.n	8000dce <USART_PeriClockControl+0x6a>
			UART4_ENABLE();
 8000dc0:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000dc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000dcc:	e056      	b.n	8000e7c <USART_PeriClockControl+0x118>
		else if(pUSARTx==UART5_REG){
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a32      	ldr	r2, [pc, #200]	@ (8000e9c <USART_PeriClockControl+0x138>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d106      	bne.n	8000de4 <USART_PeriClockControl+0x80>
			UART5_ENABLE();
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	4a2c      	ldr	r2, [pc, #176]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000ddc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000de0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000de2:	e04b      	b.n	8000e7c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART6_REG){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a2e      	ldr	r2, [pc, #184]	@ (8000ea0 <USART_PeriClockControl+0x13c>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d147      	bne.n	8000e7c <USART_PeriClockControl+0x118>
			USART6_ENABLE();
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df0:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000df2:	f043 0320 	orr.w	r3, r3, #32
 8000df6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000df8:	e040      	b.n	8000e7c <USART_PeriClockControl+0x118>
		if(pUSARTx==USART1_REG){
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a22      	ldr	r2, [pc, #136]	@ (8000e88 <USART_PeriClockControl+0x124>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d106      	bne.n	8000e10 <USART_PeriClockControl+0xac>
			((RCC_REG -> APB2ENR) &= ~(1<<4));
 8000e02:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	4a21      	ldr	r2, [pc, #132]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e08:	f023 0310 	bic.w	r3, r3, #16
 8000e0c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e0e:	e035      	b.n	8000e7c <USART_PeriClockControl+0x118>
		else if(pUSARTx==USART2_REG){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <USART_PeriClockControl+0x12c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d106      	bne.n	8000e26 <USART_PeriClockControl+0xc2>
			((RCC_REG -> APB1ENR) &= ~(1<<17));
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e1e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e24:	e02a      	b.n	8000e7c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART3_REG){
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	@ (8000e94 <USART_PeriClockControl+0x130>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d106      	bne.n	8000e3c <USART_PeriClockControl+0xd8>
			((RCC_REG -> APB1ENR) &= ~(1<<18));
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e3a:	e01f      	b.n	8000e7c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==UART4_REG){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a16      	ldr	r2, [pc, #88]	@ (8000e98 <USART_PeriClockControl+0x134>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d106      	bne.n	8000e52 <USART_PeriClockControl+0xee>
			((RCC_REG -> APB1ENR) &= ~(1<<19));
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e4a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000e4e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e50:	e014      	b.n	8000e7c <USART_PeriClockControl+0x118>
		else if(pUSARTx==UART5_REG){
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a11      	ldr	r2, [pc, #68]	@ (8000e9c <USART_PeriClockControl+0x138>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d106      	bne.n	8000e68 <USART_PeriClockControl+0x104>
			((RCC_REG -> APB1ENR) &= ~(1<<20));
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000e64:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e66:	e009      	b.n	8000e7c <USART_PeriClockControl+0x118>
		}else if(pUSARTx==USART6_REG){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <USART_PeriClockControl+0x13c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d105      	bne.n	8000e7c <USART_PeriClockControl+0x118>
			((RCC_REG -> APB2ENR) &= ~(1<<5));
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e74:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <USART_PeriClockControl+0x128>)
 8000e76:	f023 0320 	bic.w	r3, r3, #32
 8000e7a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40004400 	.word	0x40004400
 8000e94:	40004800 	.word	0x40004800
 8000e98:	40004c00 	.word	0x40004c00
 8000e9c:	40005000 	.word	0x40005000
 8000ea0:	40011400 	.word	0x40011400

08000ea4 <USART_PeripheralControl>:

void USART_PeripheralControl(USART_Handle_t *pUSARTHandle,uint8_t EnorDi){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <USART_PeripheralControl+0x24>
		pUSARTHandle->pUARTx->CR1 |= (1<<USART_CR1_UE);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000ec4:	60da      	str	r2, [r3, #12]
	}else{
		pUSARTHandle->pUARTx->CR1 &= ~(1<<USART_CR1_UE);
	}
}
 8000ec6:	e007      	b.n	8000ed8 <USART_PeripheralControl+0x34>
		pUSARTHandle->pUARTx->CR1 &= ~(1<<USART_CR1_UE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000ed6:	60da      	str	r2, [r3, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USARTx_Reg_t *pUSARTx,uint8_t StatusFlagName){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & StatusFlagName){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <USART_GetFlagStatus+0x1c>
		return FLAG_SET;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <USART_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <USART_Init>:
	pUSARTx->SR &= ~(1<<StatusFlagName);
}


void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUARTx, ENABLE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff1f 	bl	8000d64 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if (pUSARTHandle->USARTConfig.Mode == USART_MODE_ONLY_RX)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d104      	bne.n	8000f3a <USART_Init+0x2c>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e012      	b.n	8000f60 <USART_Init+0x52>
	}else if (pUSARTHandle->USARTConfig.Mode == USART_MODE_ONLY_TX)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	791b      	ldrb	r3, [r3, #4]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d104      	bne.n	8000f4e <USART_Init+0x40>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e008      	b.n	8000f60 <USART_Init+0x52>

	}else if (pUSARTHandle->USARTConfig.Mode == USART_MODE_TXRX)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d103      	bne.n	8000f60 <USART_Init+0x52>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f043 030c 	orr.w	r3, r3, #12
 8000f5e:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USARTConfig.WordLength << USART_CR1_M ;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7bdb      	ldrb	r3, [r3, #15]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	031b      	lsls	r3, r3, #12
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USARTConfig.Parity_Ctrl == USART_PARITY_EN_EVEN)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7b5b      	ldrb	r3, [r3, #13]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <USART_Init+0x76>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e00c      	b.n	8000f9e <USART_Init+0x90>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USARTConfig.Parity_Ctrl == USART_PARITY_EN_ODD )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7b5b      	ldrb	r3, [r3, #13]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d107      	bne.n	8000f9e <USART_Init+0x90>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f94:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9c:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUARTx->CR1 = tempreg;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USARTConfig.No_of_Stop_Bits << USART_CR2_STOP;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7b1b      	ldrb	r3, [r3, #12]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	031b      	lsls	r3, r3, #12
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUARTx->CR2 = tempreg;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USARTConfig.HW_Flow_Ctrl == USART_HW_FLOW_CTRL_CTS)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7b9b      	ldrb	r3, [r3, #14]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d104      	bne.n	8000fda <USART_Init+0xcc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e016      	b.n	8001008 <USART_Init+0xfa>


	}else if (pUSARTHandle->USARTConfig.HW_Flow_Ctrl == USART_HW_FLOW_CTRL_RTS)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7b9b      	ldrb	r3, [r3, #14]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d104      	bne.n	8000fee <USART_Init+0xe0>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e00c      	b.n	8001008 <USART_Init+0xfa>

	}else if (pUSARTHandle->USARTConfig.HW_Flow_Ctrl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7b9b      	ldrb	r3, [r3, #14]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d107      	bne.n	8001008 <USART_Init+0xfa>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffe:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_CTSE);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001006:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUARTx->CR3 = tempreg;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUARTx,pUSARTHandle->USARTConfig.BAUD);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4619      	mov	r1, r3
 800101a:	4610      	mov	r0, r2
 800101c:	f000 f804 	bl	8001028 <USART_SetBaudRate>
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <USART_SetBaudRate>:
}



void USART_SetBaudRate(USARTx_Reg_t *pUSARTx, uint32_t BaudRate)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1_REG || pUSARTx == USART6_REG)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a31      	ldr	r2, [pc, #196]	@ (8001100 <USART_SetBaudRate+0xd8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d003      	beq.n	8001046 <USART_SetBaudRate+0x1e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a30      	ldr	r2, [pc, #192]	@ (8001104 <USART_SetBaudRate+0xdc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d103      	bne.n	800104e <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8001046:	f000 fb3d 	bl	80016c4 <RCC_GetPCLK2Value>
 800104a:	61f8      	str	r0, [r7, #28]
 800104c:	e002      	b.n	8001054 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 800104e:	f000 fadf 	bl	8001610 <RCC_GetPCLK1Value>
 8001052:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009a      	lsls	r2, r3, #2
 800106a:	441a      	add	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fbb2 f3f3 	udiv	r3, r2, r3
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	e00a      	b.n	800108e <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	009a      	lsls	r2, r3, #2
 8001082:	441a      	add	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fbb2 f3f3 	udiv	r3, r2, r3
 800108c:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4a1d      	ldr	r2, [pc, #116]	@ (8001108 <USART_SetBaudRate+0xe0>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2264      	movs	r2, #100	@ 0x64
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	3332      	adds	r3, #50	@ 0x32
 80010c4:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <USART_SetBaudRate+0xe0>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e009      	b.n	80010e8 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	3332      	adds	r3, #50	@ 0x32
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <USART_SetBaudRate+0xe0>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	095b      	lsrs	r3, r3, #5
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	609a      	str	r2, [r3, #8]
}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40011000 	.word	0x40011000
 8001104:	40011400 	.word	0x40011400
 8001108:	51eb851f 	.word	0x51eb851f

0800110c <USART_SendData>:


void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	e033      	b.n	8001186 <USART_SendData+0x7a>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUARTx,USART_FLAG_TXE));
 800111e:	bf00      	nop
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fedc 	bl	8000ee4 <USART_GetFlagStatus>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f6      	beq.n	8001120 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USARTConfig.WordLength== USART_WORDLEN_9BITS)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	7bdb      	ldrb	r3, [r3, #15]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d119      	bne.n	8001170 <USART_SendData+0x64>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800114e:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USARTConfig.Parity_Ctrl== USART_PARITY_DISABLE)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	7b5b      	ldrb	r3, [r3, #13]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d106      	bne.n	8001168 <USART_SendData+0x5c>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3301      	adds	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3301      	adds	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	e00b      	b.n	8001180 <USART_SendData+0x74>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3301      	adds	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	e007      	b.n	8001180 <USART_SendData+0x74>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3301      	adds	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	429a      	cmp	r2, r3
 800118c:	d3c7      	bcc.n	800111e <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUARTx,USART_FLAG_TC));
 800118e:	bf00      	nop
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fea4 	bl	8000ee4 <USART_GetFlagStatus>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f6      	beq.n	8001190 <USART_SendData+0x84>
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <USART_ReceiveDataIT>:
	return txstate;

}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011be:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d014      	beq.n	80011f0 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	621a      	str	r2, [r3, #32]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	619a      	str	r2, [r3, #24]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2202      	movs	r2, #2
 80011d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		(void)pUSARTHandle->pUARTx->DR;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUARTx->CR1 |= (1<<USART_CR1_RXNEIE);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0220 	orr.w	r2, r2, #32
 80011ee:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 80011f0:	7dfb      	ldrb	r3, [r7, #23]

}
 80011f2:	4618      	mov	r0, r3
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <USART_IRQInterruptConfig>:



void USART_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnorDi){
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]

	if (EnorDi==ENABLE){
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d133      	bne.n	800127e <USART_IRQInterruptConfig+0x7e>

		if (-1<IRQNumber && IRQNumber<32){
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b1f      	cmp	r3, #31
 800121a:	d80a      	bhi.n	8001232 <USART_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1<<(IRQNumber));
 800121c:	4b35      	ldr	r3, [pc, #212]	@ (80012f4 <USART_IRQInterruptConfig+0xf4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	4611      	mov	r1, r2
 800122a:	4a32      	ldr	r2, [pc, #200]	@ (80012f4 <USART_IRQInterruptConfig+0xf4>)
 800122c:	430b      	orrs	r3, r1
 800122e:	6013      	str	r3, [r2, #0]

		}else if(63<IRQNumber && IRQNumber<96){
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
		}
	}
}
 8001230:	e059      	b.n	80012e6 <USART_IRQInterruptConfig+0xe6>
		}else if(31<IRQNumber && IRQNumber<64){
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b1f      	cmp	r3, #31
 8001236:	d90f      	bls.n	8001258 <USART_IRQInterruptConfig+0x58>
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b3f      	cmp	r3, #63	@ 0x3f
 800123c:	d80c      	bhi.n	8001258 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 800123e:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <USART_IRQInterruptConfig+0xf8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	79fa      	ldrb	r2, [r7, #7]
 8001244:	f002 021f 	and.w	r2, r2, #31
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	4611      	mov	r1, r2
 8001250:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <USART_IRQInterruptConfig+0xf8>)
 8001252:	430b      	orrs	r3, r1
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e046      	b.n	80012e6 <USART_IRQInterruptConfig+0xe6>
		}else if(63<IRQNumber && IRQNumber<96){
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b3f      	cmp	r3, #63	@ 0x3f
 800125c:	d943      	bls.n	80012e6 <USART_IRQInterruptConfig+0xe6>
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b5f      	cmp	r3, #95	@ 0x5f
 8001262:	d840      	bhi.n	80012e6 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1<<(IRQNumber%32));
 8001264:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <USART_IRQInterruptConfig+0xfc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	f002 021f 	and.w	r2, r2, #31
 800126e:	2101      	movs	r1, #1
 8001270:	fa01 f202 	lsl.w	r2, r1, r2
 8001274:	4611      	mov	r1, r2
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <USART_IRQInterruptConfig+0xfc>)
 8001278:	430b      	orrs	r3, r1
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	e033      	b.n	80012e6 <USART_IRQInterruptConfig+0xe6>
		if (-1<IRQNumber && IRQNumber<32){
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b1f      	cmp	r3, #31
 8001282:	d80a      	bhi.n	800129a <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1<<(IRQNumber));
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <USART_IRQInterruptConfig+0x100>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	4611      	mov	r1, r2
 8001292:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <USART_IRQInterruptConfig+0x100>)
 8001294:	430b      	orrs	r3, r1
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	e025      	b.n	80012e6 <USART_IRQInterruptConfig+0xe6>
		}else if(31<IRQNumber && IRQNumber<64){
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b1f      	cmp	r3, #31
 800129e:	d90f      	bls.n	80012c0 <USART_IRQInterruptConfig+0xc0>
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80012a4:	d80c      	bhi.n	80012c0 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <USART_IRQInterruptConfig+0x104>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	f002 021f 	and.w	r2, r2, #31
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	4611      	mov	r1, r2
 80012b8:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <USART_IRQInterruptConfig+0x104>)
 80012ba:	430b      	orrs	r3, r1
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e012      	b.n	80012e6 <USART_IRQInterruptConfig+0xe6>
		}else if(63<IRQNumber && IRQNumber<96){
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80012c4:	d90f      	bls.n	80012e6 <USART_IRQInterruptConfig+0xe6>
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b5f      	cmp	r3, #95	@ 0x5f
 80012ca:	d80c      	bhi.n	80012e6 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1<<(IRQNumber%64));
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <USART_IRQInterruptConfig+0x108>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80012d6:	2101      	movs	r1, #1
 80012d8:	fa01 f202 	lsl.w	r2, r1, r2
 80012dc:	4611      	mov	r1, r2
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <USART_IRQInterruptConfig+0x108>)
 80012e0:	430b      	orrs	r3, r1
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	e7ff      	b.n	80012e6 <USART_IRQInterruptConfig+0xe6>
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000e104 	.word	0xe000e104
 80012fc:	e000e108 	.word	0xe000e108
 8001300:	e000e180 	.word	0xe000e180
 8001304:	e000e184 	.word	0xe000e184
 8001308:	e000e188 	.word	0xe000e188

0800130c <USART_IRQHandling>:
	uint8_t temp2 = (IRQNumber%4);
	temp2 = (8*temp2)+ (8-NO_BITS_PR_IMPLEMENTED);
	*(NVIC_IPR + temp1) |= (IRQPriority <<(temp2));
}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	uint8_t temp1,temp2;

	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_TCIE));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001320:	73fb      	strb	r3, [r7, #15]
	temp2 =  (pUSARTHandle->pUARTx->SR & (1<<USART_SR_TC));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132e:	73bb      	strb	r3, [r7, #14]
	if(temp1 && temp2){
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d027      	beq.n	8001386 <USART_IRQHandling+0x7a>
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d024      	beq.n	8001386 <USART_IRQHandling+0x7a>
		if(pUSARTHandle->TxBusyState==USART_BUSY_IN_TX){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7c1b      	ldrb	r3, [r3, #16]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d120      	bne.n	8001386 <USART_IRQHandling+0x7a>
			if(pUSARTHandle->TxLen==0){
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11c      	bne.n	8001386 <USART_IRQHandling+0x7a>

				pUSARTHandle->pUARTx->SR &= ~(1<<USART_SR_TC);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800135a:	601a      	str	r2, [r3, #0]

				pUSARTHandle->pUARTx->CR1 &= ~(1<<USART_CR1_TCIE);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800136a:	60da      	str	r2, [r3, #12]

				pUSARTHandle->TxBusyState=USART_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	741a      	strb	r2, [r3, #16]

				pUSARTHandle->TxLen=0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]

				pUSARTHandle->pTxBuffer=NULL;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]

				USART_EventCallBack(pUSARTHandle, USART_TX_COMPLT);
 800137e:	2100      	movs	r1, #0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff f837 	bl	80003f4 <USART_EventCallBack>
			}
		}
	}

	temp1 = (pUSARTHandle->pUARTx->CR3 & (1<<USART_CR3_CTSIE));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_CTS));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <USART_IRQHandling+0xb2>
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <USART_IRQHandling+0xb2>
		pUSARTHandle->pUARTx->SR &= ~(1<<USART_SR_CTS);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013b4:	601a      	str	r2, [r3, #0]
		USART_EventCallBack(pUSARTHandle, USART_CTS_RAISED);
 80013b6:	2102      	movs	r1, #2
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff f81b 	bl	80003f4 <USART_EventCallBack>
	}

	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_TXEIE));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80013ca:	73fb      	strb	r3, [r7, #15]
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_TXE));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80013d8:	73bb      	strb	r3, [r7, #14]
	uint16_t *pdata;

	if(temp1 && temp2){
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d056      	beq.n	800148e <USART_IRQHandling+0x182>
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d053      	beq.n	800148e <USART_IRQHandling+0x182>
		if(pUSARTHandle->TxBusyState==USART_BUSY_IN_TX){
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7c1b      	ldrb	r3, [r3, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d14f      	bne.n	800148e <USART_IRQHandling+0x182>
			if(pUSARTHandle->TxLen>0){
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03f      	beq.n	8001476 <USART_IRQHandling+0x16a>
				if(pUSARTHandle->USARTConfig.WordLength== USART_WORDLEN_9BITS)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7bdb      	ldrb	r3, [r3, #15]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d12a      	bne.n	8001456 <USART_IRQHandling+0x14a>
				{
					//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	60bb      	str	r3, [r7, #8]
					pUSARTHandle->pUARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001414:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USARTConfig.Parity_Ctrl== USART_PARITY_DISABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7b5b      	ldrb	r3, [r3, #13]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10f      	bne.n	8001440 <USART_IRQHandling+0x134>
					{
						//No parity is used in this transfer. so, 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pTxBuffer++;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	615a      	str	r2, [r3, #20]
						pUSARTHandle->TxLen--;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	61da      	str	r2, [r3, #28]
 800143e:	e01a      	b.n	8001476 <USART_IRQHandling+0x16a>
					}
					else
					{
						//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]
						pUSARTHandle->TxLen--;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	1e5a      	subs	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	61da      	str	r2, [r3, #28]
 8001454:	e00f      	b.n	8001476 <USART_IRQHandling+0x16a>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUARTx->DR = (*(pUSARTHandle->pTxBuffer)  & (uint8_t)0xFF);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	615a      	str	r2, [r3, #20]
					pUSARTHandle->TxLen--;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	1e5a      	subs	r2, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	61da      	str	r2, [r3, #28]
				}
			}
			if(pUSARTHandle->TxLen==0){
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <USART_IRQHandling+0x182>
				pUSARTHandle->pUARTx->CR1 &= ~(1<<USART_CR1_TXEIE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800148c:	60da      	str	r2, [r3, #12]
			}
		}
	}

	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_RXNEIE));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	73fb      	strb	r3, [r7, #15]
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_RXNE));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d06c      	beq.n	800158a <USART_IRQHandling+0x27e>
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d069      	beq.n	800158a <USART_IRQHandling+0x27e>
		if(pUSARTHandle->RxBusyState==USART_BUSY_IN_RX){
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d164      	bne.n	800158a <USART_IRQHandling+0x27e>
			if(pUSARTHandle->RxLen>0){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d047      	beq.n	8001558 <USART_IRQHandling+0x24c>
				if(pUSARTHandle->USARTConfig.WordLength == USART_WORDLEN_9BITS)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7bdb      	ldrb	r3, [r3, #15]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d126      	bne.n	8001520 <USART_IRQHandling+0x214>
				{
					//We are going to receive 9bit data in a frame

					//check are we using USART_ParityControl control or not
					if(pUSARTHandle->USARTConfig.Parity_Ctrl == USART_PARITY_DISABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7b5b      	ldrb	r3, [r3, #13]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d114      	bne.n	8001506 <USART_IRQHandling+0x1fa>
					{
						//No parity is used. so, all 9bits will be of user data

						//read only first 9 bits. so, mask the DR with 0x01FF
						*((uint16_t*) (pUSARTHandle->pRxBuffer)) = (pUSARTHandle->pUARTx->DR  & (uint16_t)0x01ff);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						(pUSARTHandle->pRxBuffer)++;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
						(pUSARTHandle->pRxBuffer)++;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	e028      	b.n	8001558 <USART_IRQHandling+0x24c>
					}
					else
					{
						//Parity is used, so, 8bits will be of user data and 1 bit is parity
						 *(pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUARTx->DR  & (uint8_t)0xFF);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	701a      	strb	r2, [r3, #0]


						 //Increment the pRxBuffer
						 (pUSARTHandle->pRxBuffer)++;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
 800151e:	e01b      	b.n	8001558 <USART_IRQHandling+0x24c>
				else
				{
					//We are going to receive 8bit data in a frame

					//check are we using USART_ParityControl control or not
					if(pUSARTHandle->USARTConfig.Parity_Ctrl == USART_PARITY_DISABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7b5b      	ldrb	r3, [r3, #13]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d107      	bne.n	800153a <USART_IRQHandling+0x22e>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *(pUSARTHandle->pRxBuffer) = pUSARTHandle->pUARTx->DR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e009      	b.n	800154e <USART_IRQHandling+0x242>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *(pUSARTHandle->pRxBuffer) = (uint8_t) (pUSARTHandle->pUARTx->DR  & (uint8_t)0x7f);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]

					}

					//increment the pRxBuffer
					(pUSARTHandle->pRxBuffer)++;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
				}
			}
			pUSARTHandle->RxLen--;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	621a      	str	r2, [r3, #32]
			if(pUSARTHandle->RxLen==0){
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <USART_IRQHandling+0x27e>
				pUSARTHandle->pUARTx->CR1 &= ~(1<<USART_CR1_RXNEIE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0220 	bic.w	r2, r2, #32
 8001578:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState=USART_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				USART_EventCallBack(pUSARTHandle, USART_RX_COMPLT);
 8001582:	2101      	movs	r1, #1
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7fe ff35 	bl	80003f4 <USART_EventCallBack>
			}

		}
	}
	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_RXNEIE));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	73fb      	strb	r3, [r7, #15]
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_ORE));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d009      	beq.n	80015c0 <USART_IRQHandling+0x2b4>
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <USART_IRQHandling+0x2b4>
		Clear_OVR_IDLE_FLAG(pUSARTHandle);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fbc4 	bl	8000d40 <Clear_OVR_IDLE_FLAG>
		USART_EventCallBack(pUSARTHandle, USART_ORE_RAISED);
 80015b8:	2104      	movs	r1, #4
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7fe ff1a 	bl	80003f4 <USART_EventCallBack>
	}
	temp1 = (pUSARTHandle->pUARTx->CR1 & (1<<USART_CR1_IDLEIE));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	73fb      	strb	r3, [r7, #15]
	temp2 = (pUSARTHandle->pUARTx->SR & (1<<USART_SR_IDLE));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <USART_IRQHandling+0x2ea>
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <USART_IRQHandling+0x2ea>
		Clear_OVR_IDLE_FLAG(pUSARTHandle);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fba9 	bl	8000d40 <Clear_OVR_IDLE_FLAG>
		USART_EventCallBack(pUSARTHandle, USART_IDLE_RAISED);
 80015ee:	2103      	movs	r1, #3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7fe feff 	bl	80003f4 <USART_EventCallBack>
	}


}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <RCC_getPLLOutputClock>:
 */


#include "stm32f407_RCC_drivers.h"

uint32_t RCC_getPLLOutputClock(void){
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
	return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <RCC_GetPCLK1Value>:


uint16_t AHB_PreScalar[8] ={2,4,8,16,64,128,256,512};
uint16_t APB_PreScalar[4] ={2,4,8,16};

uint32_t RCC_GetPCLK1Value(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk,ahpb,apb;

	uint8_t clksrc,temp;

	clksrc = ((RCC_REG->CFGR >> 2) & 0x3);
 8001616:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <RCC_GetPCLK1Value+0xa0>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	72fb      	strb	r3, [r7, #11]
	if (clksrc == 0){
 8001624:	7afb      	ldrb	r3, [r7, #11]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <RCC_GetPCLK1Value+0xa4>)
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e00b      	b.n	8001648 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2){
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d102      	bne.n	800163c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <RCC_GetPCLK1Value+0xa8>)
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e005      	b.n	8001648 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 3){
 800163c:	7afb      	ldrb	r3, [r7, #11]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d102      	bne.n	8001648 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_getPLLOutputClock();
 8001642:	f7ff ffdc 	bl	80015fe <RCC_getPLLOutputClock>
 8001646:	6178      	str	r0, [r7, #20]
	}

	temp =  ((RCC_REG->CFGR >> 4) & 0xF);
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <RCC_GetPCLK1Value+0xa0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	72bb      	strb	r3, [r7, #10]
	if(temp<8){
 8001656:	7abb      	ldrb	r3, [r7, #10]
 8001658:	2b07      	cmp	r3, #7
 800165a:	d802      	bhi.n	8001662 <RCC_GetPCLK1Value+0x52>
		ahpb=1;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	e005      	b.n	800166e <RCC_GetPCLK1Value+0x5e>
	}else{
		ahpb = AHB_PreScalar[temp-8];
 8001662:	7abb      	ldrb	r3, [r7, #10]
 8001664:	3b08      	subs	r3, #8
 8001666:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <RCC_GetPCLK1Value+0xac>)
 8001668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800166c:	613b      	str	r3, [r7, #16]
	}

	temp =  ((RCC_REG->CFGR >> 10) & 0x7);
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <RCC_GetPCLK1Value+0xa0>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	0a9b      	lsrs	r3, r3, #10
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	72bb      	strb	r3, [r7, #10]
	if(temp<4){
 800167c:	7abb      	ldrb	r3, [r7, #10]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d802      	bhi.n	8001688 <RCC_GetPCLK1Value+0x78>
		apb=1;
 8001682:	2301      	movs	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e005      	b.n	8001694 <RCC_GetPCLK1Value+0x84>
	}else{
		apb = APB_PreScalar[temp-4];
 8001688:	7abb      	ldrb	r3, [r7, #10]
 800168a:	3b04      	subs	r3, #4
 800168c:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <RCC_GetPCLK1Value+0xb0>)
 800168e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001692:	60fb      	str	r3, [r7, #12]
	}

	pclk1 = (SystemClk/ahpb)/apb;
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fbb2 f2f3 	udiv	r2, r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	607b      	str	r3, [r7, #4]

	return pclk1;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	00f42400 	.word	0x00f42400
 80016b8:	007a1200 	.word	0x007a1200
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000018 	.word	0x20000018

080016c4 <RCC_GetPCLK2Value>:


uint32_t RCC_GetPCLK2Value(void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
	uint32_t pclk2,SystemClk,ahpb,apb;

	uint8_t clksrc,temp;

	clksrc = ((RCC_REG->CFGR >> 2) & 0x3);
 80016ca:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <RCC_GetPCLK2Value+0xa0>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	72fb      	strb	r3, [r7, #11]
	if (clksrc == 0){
 80016d8:	7afb      	ldrb	r3, [r7, #11]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <RCC_GetPCLK2Value+0x20>
		SystemClk = 16000000;
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <RCC_GetPCLK2Value+0xa4>)
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e00b      	b.n	80016fc <RCC_GetPCLK2Value+0x38>
	}else if (clksrc == 2){
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d102      	bne.n	80016f0 <RCC_GetPCLK2Value+0x2c>
		SystemClk = 8000000;
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <RCC_GetPCLK2Value+0xa8>)
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e005      	b.n	80016fc <RCC_GetPCLK2Value+0x38>
	}else if(clksrc == 3){
 80016f0:	7afb      	ldrb	r3, [r7, #11]
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d102      	bne.n	80016fc <RCC_GetPCLK2Value+0x38>
		SystemClk = RCC_getPLLOutputClock();
 80016f6:	f7ff ff82 	bl	80015fe <RCC_getPLLOutputClock>
 80016fa:	6178      	str	r0, [r7, #20]
	}

	temp =  ((RCC_REG->CFGR >> 4) & 0xF);
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <RCC_GetPCLK2Value+0xa0>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	72bb      	strb	r3, [r7, #10]
	if(temp<8){
 800170a:	7abb      	ldrb	r3, [r7, #10]
 800170c:	2b07      	cmp	r3, #7
 800170e:	d802      	bhi.n	8001716 <RCC_GetPCLK2Value+0x52>
		ahpb=1;
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	e005      	b.n	8001722 <RCC_GetPCLK2Value+0x5e>
	}else{
		ahpb = AHB_PreScalar[temp-8];
 8001716:	7abb      	ldrb	r3, [r7, #10]
 8001718:	3b08      	subs	r3, #8
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <RCC_GetPCLK2Value+0xac>)
 800171c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001720:	613b      	str	r3, [r7, #16]
	}

	temp =  ((RCC_REG->CFGR >> 13) & 0x7);
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <RCC_GetPCLK2Value+0xa0>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	0b5b      	lsrs	r3, r3, #13
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	72bb      	strb	r3, [r7, #10]
	if(temp<4){
 8001730:	7abb      	ldrb	r3, [r7, #10]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d802      	bhi.n	800173c <RCC_GetPCLK2Value+0x78>
		apb=1;
 8001736:	2301      	movs	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e005      	b.n	8001748 <RCC_GetPCLK2Value+0x84>
	}else{
		apb = APB_PreScalar[temp-4];
 800173c:	7abb      	ldrb	r3, [r7, #10]
 800173e:	3b04      	subs	r3, #4
 8001740:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <RCC_GetPCLK2Value+0xb0>)
 8001742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001746:	60fb      	str	r3, [r7, #12]
	}

	pclk2 = (SystemClk/ahpb)/apb;
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	607b      	str	r3, [r7, #4]

	return pclk2;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	00f42400 	.word	0x00f42400
 800176c:	007a1200 	.word	0x007a1200
 8001770:	20000008 	.word	0x20000008
 8001774:	20000018 	.word	0x20000018

08001778 <std>:
 8001778:	2300      	movs	r3, #0
 800177a:	b510      	push	{r4, lr}
 800177c:	4604      	mov	r4, r0
 800177e:	e9c0 3300 	strd	r3, r3, [r0]
 8001782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001786:	6083      	str	r3, [r0, #8]
 8001788:	8181      	strh	r1, [r0, #12]
 800178a:	6643      	str	r3, [r0, #100]	@ 0x64
 800178c:	81c2      	strh	r2, [r0, #14]
 800178e:	6183      	str	r3, [r0, #24]
 8001790:	4619      	mov	r1, r3
 8001792:	2208      	movs	r2, #8
 8001794:	305c      	adds	r0, #92	@ 0x5c
 8001796:	f000 fa01 	bl	8001b9c <memset>
 800179a:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <std+0x58>)
 800179c:	6263      	str	r3, [r4, #36]	@ 0x24
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <std+0x5c>)
 80017a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <std+0x60>)
 80017a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <std+0x64>)
 80017a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <std+0x68>)
 80017ac:	6224      	str	r4, [r4, #32]
 80017ae:	429c      	cmp	r4, r3
 80017b0:	d006      	beq.n	80017c0 <std+0x48>
 80017b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80017b6:	4294      	cmp	r4, r2
 80017b8:	d002      	beq.n	80017c0 <std+0x48>
 80017ba:	33d0      	adds	r3, #208	@ 0xd0
 80017bc:	429c      	cmp	r4, r3
 80017be:	d105      	bne.n	80017cc <std+0x54>
 80017c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80017c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017c8:	f000 ba60 	b.w	8001c8c <__retarget_lock_init_recursive>
 80017cc:	bd10      	pop	{r4, pc}
 80017ce:	bf00      	nop
 80017d0:	080019ed 	.word	0x080019ed
 80017d4:	08001a0f 	.word	0x08001a0f
 80017d8:	08001a47 	.word	0x08001a47
 80017dc:	08001a6b 	.word	0x08001a6b
 80017e0:	200000c8 	.word	0x200000c8

080017e4 <stdio_exit_handler>:
 80017e4:	4a02      	ldr	r2, [pc, #8]	@ (80017f0 <stdio_exit_handler+0xc>)
 80017e6:	4903      	ldr	r1, [pc, #12]	@ (80017f4 <stdio_exit_handler+0x10>)
 80017e8:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <stdio_exit_handler+0x14>)
 80017ea:	f000 b869 	b.w	80018c0 <_fwalk_sglue>
 80017ee:	bf00      	nop
 80017f0:	20000020 	.word	0x20000020
 80017f4:	0800252d 	.word	0x0800252d
 80017f8:	20000030 	.word	0x20000030

080017fc <cleanup_stdio>:
 80017fc:	6841      	ldr	r1, [r0, #4]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <cleanup_stdio+0x34>)
 8001800:	4299      	cmp	r1, r3
 8001802:	b510      	push	{r4, lr}
 8001804:	4604      	mov	r4, r0
 8001806:	d001      	beq.n	800180c <cleanup_stdio+0x10>
 8001808:	f000 fe90 	bl	800252c <_fflush_r>
 800180c:	68a1      	ldr	r1, [r4, #8]
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <cleanup_stdio+0x38>)
 8001810:	4299      	cmp	r1, r3
 8001812:	d002      	beq.n	800181a <cleanup_stdio+0x1e>
 8001814:	4620      	mov	r0, r4
 8001816:	f000 fe89 	bl	800252c <_fflush_r>
 800181a:	68e1      	ldr	r1, [r4, #12]
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <cleanup_stdio+0x3c>)
 800181e:	4299      	cmp	r1, r3
 8001820:	d004      	beq.n	800182c <cleanup_stdio+0x30>
 8001822:	4620      	mov	r0, r4
 8001824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001828:	f000 be80 	b.w	800252c <_fflush_r>
 800182c:	bd10      	pop	{r4, pc}
 800182e:	bf00      	nop
 8001830:	200000c8 	.word	0x200000c8
 8001834:	20000130 	.word	0x20000130
 8001838:	20000198 	.word	0x20000198

0800183c <global_stdio_init.part.0>:
 800183c:	b510      	push	{r4, lr}
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <global_stdio_init.part.0+0x30>)
 8001840:	4c0b      	ldr	r4, [pc, #44]	@ (8001870 <global_stdio_init.part.0+0x34>)
 8001842:	4a0c      	ldr	r2, [pc, #48]	@ (8001874 <global_stdio_init.part.0+0x38>)
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4620      	mov	r0, r4
 8001848:	2200      	movs	r2, #0
 800184a:	2104      	movs	r1, #4
 800184c:	f7ff ff94 	bl	8001778 <std>
 8001850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001854:	2201      	movs	r2, #1
 8001856:	2109      	movs	r1, #9
 8001858:	f7ff ff8e 	bl	8001778 <std>
 800185c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001860:	2202      	movs	r2, #2
 8001862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001866:	2112      	movs	r1, #18
 8001868:	f7ff bf86 	b.w	8001778 <std>
 800186c:	20000200 	.word	0x20000200
 8001870:	200000c8 	.word	0x200000c8
 8001874:	080017e5 	.word	0x080017e5

08001878 <__sfp_lock_acquire>:
 8001878:	4801      	ldr	r0, [pc, #4]	@ (8001880 <__sfp_lock_acquire+0x8>)
 800187a:	f000 ba08 	b.w	8001c8e <__retarget_lock_acquire_recursive>
 800187e:	bf00      	nop
 8001880:	20000209 	.word	0x20000209

08001884 <__sfp_lock_release>:
 8001884:	4801      	ldr	r0, [pc, #4]	@ (800188c <__sfp_lock_release+0x8>)
 8001886:	f000 ba03 	b.w	8001c90 <__retarget_lock_release_recursive>
 800188a:	bf00      	nop
 800188c:	20000209 	.word	0x20000209

08001890 <__sinit>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	f7ff fff0 	bl	8001878 <__sfp_lock_acquire>
 8001898:	6a23      	ldr	r3, [r4, #32]
 800189a:	b11b      	cbz	r3, 80018a4 <__sinit+0x14>
 800189c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018a0:	f7ff bff0 	b.w	8001884 <__sfp_lock_release>
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__sinit+0x28>)
 80018a6:	6223      	str	r3, [r4, #32]
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <__sinit+0x2c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f5      	bne.n	800189c <__sinit+0xc>
 80018b0:	f7ff ffc4 	bl	800183c <global_stdio_init.part.0>
 80018b4:	e7f2      	b.n	800189c <__sinit+0xc>
 80018b6:	bf00      	nop
 80018b8:	080017fd 	.word	0x080017fd
 80018bc:	20000200 	.word	0x20000200

080018c0 <_fwalk_sglue>:
 80018c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018c4:	4607      	mov	r7, r0
 80018c6:	4688      	mov	r8, r1
 80018c8:	4614      	mov	r4, r2
 80018ca:	2600      	movs	r6, #0
 80018cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018d0:	f1b9 0901 	subs.w	r9, r9, #1
 80018d4:	d505      	bpl.n	80018e2 <_fwalk_sglue+0x22>
 80018d6:	6824      	ldr	r4, [r4, #0]
 80018d8:	2c00      	cmp	r4, #0
 80018da:	d1f7      	bne.n	80018cc <_fwalk_sglue+0xc>
 80018dc:	4630      	mov	r0, r6
 80018de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018e2:	89ab      	ldrh	r3, [r5, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d907      	bls.n	80018f8 <_fwalk_sglue+0x38>
 80018e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018ec:	3301      	adds	r3, #1
 80018ee:	d003      	beq.n	80018f8 <_fwalk_sglue+0x38>
 80018f0:	4629      	mov	r1, r5
 80018f2:	4638      	mov	r0, r7
 80018f4:	47c0      	blx	r8
 80018f6:	4306      	orrs	r6, r0
 80018f8:	3568      	adds	r5, #104	@ 0x68
 80018fa:	e7e9      	b.n	80018d0 <_fwalk_sglue+0x10>

080018fc <iprintf>:
 80018fc:	b40f      	push	{r0, r1, r2, r3}
 80018fe:	b507      	push	{r0, r1, r2, lr}
 8001900:	4906      	ldr	r1, [pc, #24]	@ (800191c <iprintf+0x20>)
 8001902:	ab04      	add	r3, sp, #16
 8001904:	6808      	ldr	r0, [r1, #0]
 8001906:	f853 2b04 	ldr.w	r2, [r3], #4
 800190a:	6881      	ldr	r1, [r0, #8]
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	f000 fae3 	bl	8001ed8 <_vfiprintf_r>
 8001912:	b003      	add	sp, #12
 8001914:	f85d eb04 	ldr.w	lr, [sp], #4
 8001918:	b004      	add	sp, #16
 800191a:	4770      	bx	lr
 800191c:	2000002c 	.word	0x2000002c

08001920 <putchar>:
 8001920:	4b02      	ldr	r3, [pc, #8]	@ (800192c <putchar+0xc>)
 8001922:	4601      	mov	r1, r0
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	6882      	ldr	r2, [r0, #8]
 8001928:	f000 be8a 	b.w	8002640 <_putc_r>
 800192c:	2000002c 	.word	0x2000002c

08001930 <_puts_r>:
 8001930:	6a03      	ldr	r3, [r0, #32]
 8001932:	b570      	push	{r4, r5, r6, lr}
 8001934:	6884      	ldr	r4, [r0, #8]
 8001936:	4605      	mov	r5, r0
 8001938:	460e      	mov	r6, r1
 800193a:	b90b      	cbnz	r3, 8001940 <_puts_r+0x10>
 800193c:	f7ff ffa8 	bl	8001890 <__sinit>
 8001940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001942:	07db      	lsls	r3, r3, #31
 8001944:	d405      	bmi.n	8001952 <_puts_r+0x22>
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	0598      	lsls	r0, r3, #22
 800194a:	d402      	bmi.n	8001952 <_puts_r+0x22>
 800194c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800194e:	f000 f99e 	bl	8001c8e <__retarget_lock_acquire_recursive>
 8001952:	89a3      	ldrh	r3, [r4, #12]
 8001954:	0719      	lsls	r1, r3, #28
 8001956:	d502      	bpl.n	800195e <_puts_r+0x2e>
 8001958:	6923      	ldr	r3, [r4, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d135      	bne.n	80019ca <_puts_r+0x9a>
 800195e:	4621      	mov	r1, r4
 8001960:	4628      	mov	r0, r5
 8001962:	f000 f8c5 	bl	8001af0 <__swsetup_r>
 8001966:	b380      	cbz	r0, 80019ca <_puts_r+0x9a>
 8001968:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800196c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800196e:	07da      	lsls	r2, r3, #31
 8001970:	d405      	bmi.n	800197e <_puts_r+0x4e>
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	059b      	lsls	r3, r3, #22
 8001976:	d402      	bmi.n	800197e <_puts_r+0x4e>
 8001978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800197a:	f000 f989 	bl	8001c90 <__retarget_lock_release_recursive>
 800197e:	4628      	mov	r0, r5
 8001980:	bd70      	pop	{r4, r5, r6, pc}
 8001982:	2b00      	cmp	r3, #0
 8001984:	da04      	bge.n	8001990 <_puts_r+0x60>
 8001986:	69a2      	ldr	r2, [r4, #24]
 8001988:	429a      	cmp	r2, r3
 800198a:	dc17      	bgt.n	80019bc <_puts_r+0x8c>
 800198c:	290a      	cmp	r1, #10
 800198e:	d015      	beq.n	80019bc <_puts_r+0x8c>
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	6022      	str	r2, [r4, #0]
 8001996:	7019      	strb	r1, [r3, #0]
 8001998:	68a3      	ldr	r3, [r4, #8]
 800199a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800199e:	3b01      	subs	r3, #1
 80019a0:	60a3      	str	r3, [r4, #8]
 80019a2:	2900      	cmp	r1, #0
 80019a4:	d1ed      	bne.n	8001982 <_puts_r+0x52>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da11      	bge.n	80019ce <_puts_r+0x9e>
 80019aa:	4622      	mov	r2, r4
 80019ac:	210a      	movs	r1, #10
 80019ae:	4628      	mov	r0, r5
 80019b0:	f000 f85f 	bl	8001a72 <__swbuf_r>
 80019b4:	3001      	adds	r0, #1
 80019b6:	d0d7      	beq.n	8001968 <_puts_r+0x38>
 80019b8:	250a      	movs	r5, #10
 80019ba:	e7d7      	b.n	800196c <_puts_r+0x3c>
 80019bc:	4622      	mov	r2, r4
 80019be:	4628      	mov	r0, r5
 80019c0:	f000 f857 	bl	8001a72 <__swbuf_r>
 80019c4:	3001      	adds	r0, #1
 80019c6:	d1e7      	bne.n	8001998 <_puts_r+0x68>
 80019c8:	e7ce      	b.n	8001968 <_puts_r+0x38>
 80019ca:	3e01      	subs	r6, #1
 80019cc:	e7e4      	b.n	8001998 <_puts_r+0x68>
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	6022      	str	r2, [r4, #0]
 80019d4:	220a      	movs	r2, #10
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e7ee      	b.n	80019b8 <_puts_r+0x88>
	...

080019dc <puts>:
 80019dc:	4b02      	ldr	r3, [pc, #8]	@ (80019e8 <puts+0xc>)
 80019de:	4601      	mov	r1, r0
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	f7ff bfa5 	b.w	8001930 <_puts_r>
 80019e6:	bf00      	nop
 80019e8:	2000002c 	.word	0x2000002c

080019ec <__sread>:
 80019ec:	b510      	push	{r4, lr}
 80019ee:	460c      	mov	r4, r1
 80019f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019f4:	f000 f8fc 	bl	8001bf0 <_read_r>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	bfab      	itete	ge
 80019fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80019fe:	89a3      	ldrhlt	r3, [r4, #12]
 8001a00:	181b      	addge	r3, r3, r0
 8001a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001a06:	bfac      	ite	ge
 8001a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001a0a:	81a3      	strhlt	r3, [r4, #12]
 8001a0c:	bd10      	pop	{r4, pc}

08001a0e <__swrite>:
 8001a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a12:	461f      	mov	r7, r3
 8001a14:	898b      	ldrh	r3, [r1, #12]
 8001a16:	05db      	lsls	r3, r3, #23
 8001a18:	4605      	mov	r5, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4616      	mov	r6, r2
 8001a1e:	d505      	bpl.n	8001a2c <__swrite+0x1e>
 8001a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a24:	2302      	movs	r3, #2
 8001a26:	2200      	movs	r2, #0
 8001a28:	f000 f8d0 	bl	8001bcc <_lseek_r>
 8001a2c:	89a3      	ldrh	r3, [r4, #12]
 8001a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a36:	81a3      	strh	r3, [r4, #12]
 8001a38:	4632      	mov	r2, r6
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a42:	f000 b8e7 	b.w	8001c14 <_write_r>

08001a46 <__sseek>:
 8001a46:	b510      	push	{r4, lr}
 8001a48:	460c      	mov	r4, r1
 8001a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a4e:	f000 f8bd 	bl	8001bcc <_lseek_r>
 8001a52:	1c43      	adds	r3, r0, #1
 8001a54:	89a3      	ldrh	r3, [r4, #12]
 8001a56:	bf15      	itete	ne
 8001a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a62:	81a3      	strheq	r3, [r4, #12]
 8001a64:	bf18      	it	ne
 8001a66:	81a3      	strhne	r3, [r4, #12]
 8001a68:	bd10      	pop	{r4, pc}

08001a6a <__sclose>:
 8001a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a6e:	f000 b89d 	b.w	8001bac <_close_r>

08001a72 <__swbuf_r>:
 8001a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a74:	460e      	mov	r6, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	4605      	mov	r5, r0
 8001a7a:	b118      	cbz	r0, 8001a84 <__swbuf_r+0x12>
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	b90b      	cbnz	r3, 8001a84 <__swbuf_r+0x12>
 8001a80:	f7ff ff06 	bl	8001890 <__sinit>
 8001a84:	69a3      	ldr	r3, [r4, #24]
 8001a86:	60a3      	str	r3, [r4, #8]
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	071a      	lsls	r2, r3, #28
 8001a8c:	d501      	bpl.n	8001a92 <__swbuf_r+0x20>
 8001a8e:	6923      	ldr	r3, [r4, #16]
 8001a90:	b943      	cbnz	r3, 8001aa4 <__swbuf_r+0x32>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 f82b 	bl	8001af0 <__swsetup_r>
 8001a9a:	b118      	cbz	r0, 8001aa4 <__swbuf_r+0x32>
 8001a9c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	6922      	ldr	r2, [r4, #16]
 8001aa8:	1a98      	subs	r0, r3, r2
 8001aaa:	6963      	ldr	r3, [r4, #20]
 8001aac:	b2f6      	uxtb	r6, r6
 8001aae:	4283      	cmp	r3, r0
 8001ab0:	4637      	mov	r7, r6
 8001ab2:	dc05      	bgt.n	8001ac0 <__swbuf_r+0x4e>
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 fd38 	bl	800252c <_fflush_r>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d1ed      	bne.n	8001a9c <__swbuf_r+0x2a>
 8001ac0:	68a3      	ldr	r3, [r4, #8]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	60a3      	str	r3, [r4, #8]
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	6022      	str	r2, [r4, #0]
 8001acc:	701e      	strb	r6, [r3, #0]
 8001ace:	6962      	ldr	r2, [r4, #20]
 8001ad0:	1c43      	adds	r3, r0, #1
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d004      	beq.n	8001ae0 <__swbuf_r+0x6e>
 8001ad6:	89a3      	ldrh	r3, [r4, #12]
 8001ad8:	07db      	lsls	r3, r3, #31
 8001ada:	d5e1      	bpl.n	8001aa0 <__swbuf_r+0x2e>
 8001adc:	2e0a      	cmp	r6, #10
 8001ade:	d1df      	bne.n	8001aa0 <__swbuf_r+0x2e>
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f000 fd22 	bl	800252c <_fflush_r>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d0d9      	beq.n	8001aa0 <__swbuf_r+0x2e>
 8001aec:	e7d6      	b.n	8001a9c <__swbuf_r+0x2a>
	...

08001af0 <__swsetup_r>:
 8001af0:	b538      	push	{r3, r4, r5, lr}
 8001af2:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <__swsetup_r+0xa8>)
 8001af4:	4605      	mov	r5, r0
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	460c      	mov	r4, r1
 8001afa:	b118      	cbz	r0, 8001b04 <__swsetup_r+0x14>
 8001afc:	6a03      	ldr	r3, [r0, #32]
 8001afe:	b90b      	cbnz	r3, 8001b04 <__swsetup_r+0x14>
 8001b00:	f7ff fec6 	bl	8001890 <__sinit>
 8001b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b08:	0719      	lsls	r1, r3, #28
 8001b0a:	d422      	bmi.n	8001b52 <__swsetup_r+0x62>
 8001b0c:	06da      	lsls	r2, r3, #27
 8001b0e:	d407      	bmi.n	8001b20 <__swsetup_r+0x30>
 8001b10:	2209      	movs	r2, #9
 8001b12:	602a      	str	r2, [r5, #0]
 8001b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b18:	81a3      	strh	r3, [r4, #12]
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b1e:	e033      	b.n	8001b88 <__swsetup_r+0x98>
 8001b20:	0758      	lsls	r0, r3, #29
 8001b22:	d512      	bpl.n	8001b4a <__swsetup_r+0x5a>
 8001b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b26:	b141      	cbz	r1, 8001b3a <__swsetup_r+0x4a>
 8001b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b2c:	4299      	cmp	r1, r3
 8001b2e:	d002      	beq.n	8001b36 <__swsetup_r+0x46>
 8001b30:	4628      	mov	r0, r5
 8001b32:	f000 f8af 	bl	8001c94 <_free_r>
 8001b36:	2300      	movs	r3, #0
 8001b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b40:	81a3      	strh	r3, [r4, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	6063      	str	r3, [r4, #4]
 8001b46:	6923      	ldr	r3, [r4, #16]
 8001b48:	6023      	str	r3, [r4, #0]
 8001b4a:	89a3      	ldrh	r3, [r4, #12]
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	81a3      	strh	r3, [r4, #12]
 8001b52:	6923      	ldr	r3, [r4, #16]
 8001b54:	b94b      	cbnz	r3, 8001b6a <__swsetup_r+0x7a>
 8001b56:	89a3      	ldrh	r3, [r4, #12]
 8001b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b60:	d003      	beq.n	8001b6a <__swsetup_r+0x7a>
 8001b62:	4621      	mov	r1, r4
 8001b64:	4628      	mov	r0, r5
 8001b66:	f000 fd2f 	bl	80025c8 <__smakebuf_r>
 8001b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b6e:	f013 0201 	ands.w	r2, r3, #1
 8001b72:	d00a      	beq.n	8001b8a <__swsetup_r+0x9a>
 8001b74:	2200      	movs	r2, #0
 8001b76:	60a2      	str	r2, [r4, #8]
 8001b78:	6962      	ldr	r2, [r4, #20]
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	61a2      	str	r2, [r4, #24]
 8001b7e:	6922      	ldr	r2, [r4, #16]
 8001b80:	b942      	cbnz	r2, 8001b94 <__swsetup_r+0xa4>
 8001b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b86:	d1c5      	bne.n	8001b14 <__swsetup_r+0x24>
 8001b88:	bd38      	pop	{r3, r4, r5, pc}
 8001b8a:	0799      	lsls	r1, r3, #30
 8001b8c:	bf58      	it	pl
 8001b8e:	6962      	ldrpl	r2, [r4, #20]
 8001b90:	60a2      	str	r2, [r4, #8]
 8001b92:	e7f4      	b.n	8001b7e <__swsetup_r+0x8e>
 8001b94:	2000      	movs	r0, #0
 8001b96:	e7f7      	b.n	8001b88 <__swsetup_r+0x98>
 8001b98:	2000002c 	.word	0x2000002c

08001b9c <memset>:
 8001b9c:	4402      	add	r2, r0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <memset+0xa>
 8001ba4:	4770      	bx	lr
 8001ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8001baa:	e7f9      	b.n	8001ba0 <memset+0x4>

08001bac <_close_r>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	4d06      	ldr	r5, [pc, #24]	@ (8001bc8 <_close_r+0x1c>)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	602b      	str	r3, [r5, #0]
 8001bb8:	f7fe fca9 	bl	800050e <_close>
 8001bbc:	1c43      	adds	r3, r0, #1
 8001bbe:	d102      	bne.n	8001bc6 <_close_r+0x1a>
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	b103      	cbz	r3, 8001bc6 <_close_r+0x1a>
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	20000204 	.word	0x20000204

08001bcc <_lseek_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4d07      	ldr	r5, [pc, #28]	@ (8001bec <_lseek_r+0x20>)
 8001bd0:	4604      	mov	r4, r0
 8001bd2:	4608      	mov	r0, r1
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	602a      	str	r2, [r5, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f7fe fcbe 	bl	800055c <_lseek>
 8001be0:	1c43      	adds	r3, r0, #1
 8001be2:	d102      	bne.n	8001bea <_lseek_r+0x1e>
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	b103      	cbz	r3, 8001bea <_lseek_r+0x1e>
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	20000204 	.word	0x20000204

08001bf0 <_read_r>:
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4d07      	ldr	r5, [pc, #28]	@ (8001c10 <_read_r+0x20>)
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	602a      	str	r2, [r5, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7fe fc4c 	bl	800049c <_read>
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	d102      	bne.n	8001c0e <_read_r+0x1e>
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	b103      	cbz	r3, 8001c0e <_read_r+0x1e>
 8001c0c:	6023      	str	r3, [r4, #0]
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}
 8001c10:	20000204 	.word	0x20000204

08001c14 <_write_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4d07      	ldr	r5, [pc, #28]	@ (8001c34 <_write_r+0x20>)
 8001c18:	4604      	mov	r4, r0
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	602a      	str	r2, [r5, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7fe fc57 	bl	80004d6 <_write>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d102      	bne.n	8001c32 <_write_r+0x1e>
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	b103      	cbz	r3, 8001c32 <_write_r+0x1e>
 8001c30:	6023      	str	r3, [r4, #0]
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
 8001c34:	20000204 	.word	0x20000204

08001c38 <__errno>:
 8001c38:	4b01      	ldr	r3, [pc, #4]	@ (8001c40 <__errno+0x8>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000002c 	.word	0x2000002c

08001c44 <__libc_init_array>:
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	4d0d      	ldr	r5, [pc, #52]	@ (8001c7c <__libc_init_array+0x38>)
 8001c48:	4c0d      	ldr	r4, [pc, #52]	@ (8001c80 <__libc_init_array+0x3c>)
 8001c4a:	1b64      	subs	r4, r4, r5
 8001c4c:	10a4      	asrs	r4, r4, #2
 8001c4e:	2600      	movs	r6, #0
 8001c50:	42a6      	cmp	r6, r4
 8001c52:	d109      	bne.n	8001c68 <__libc_init_array+0x24>
 8001c54:	4d0b      	ldr	r5, [pc, #44]	@ (8001c84 <__libc_init_array+0x40>)
 8001c56:	4c0c      	ldr	r4, [pc, #48]	@ (8001c88 <__libc_init_array+0x44>)
 8001c58:	f000 fd58 	bl	800270c <_init>
 8001c5c:	1b64      	subs	r4, r4, r5
 8001c5e:	10a4      	asrs	r4, r4, #2
 8001c60:	2600      	movs	r6, #0
 8001c62:	42a6      	cmp	r6, r4
 8001c64:	d105      	bne.n	8001c72 <__libc_init_array+0x2e>
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c6c:	4798      	blx	r3
 8001c6e:	3601      	adds	r6, #1
 8001c70:	e7ee      	b.n	8001c50 <__libc_init_array+0xc>
 8001c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c76:	4798      	blx	r3
 8001c78:	3601      	adds	r6, #1
 8001c7a:	e7f2      	b.n	8001c62 <__libc_init_array+0x1e>
 8001c7c:	0800276c 	.word	0x0800276c
 8001c80:	0800276c 	.word	0x0800276c
 8001c84:	0800276c 	.word	0x0800276c
 8001c88:	08002770 	.word	0x08002770

08001c8c <__retarget_lock_init_recursive>:
 8001c8c:	4770      	bx	lr

08001c8e <__retarget_lock_acquire_recursive>:
 8001c8e:	4770      	bx	lr

08001c90 <__retarget_lock_release_recursive>:
 8001c90:	4770      	bx	lr
	...

08001c94 <_free_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4605      	mov	r5, r0
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d041      	beq.n	8001d20 <_free_r+0x8c>
 8001c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ca0:	1f0c      	subs	r4, r1, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bfb8      	it	lt
 8001ca6:	18e4      	addlt	r4, r4, r3
 8001ca8:	f000 f8e0 	bl	8001e6c <__malloc_lock>
 8001cac:	4a1d      	ldr	r2, [pc, #116]	@ (8001d24 <_free_r+0x90>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	b933      	cbnz	r3, 8001cc0 <_free_r+0x2c>
 8001cb2:	6063      	str	r3, [r4, #4]
 8001cb4:	6014      	str	r4, [r2, #0]
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cbc:	f000 b8dc 	b.w	8001e78 <__malloc_unlock>
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d908      	bls.n	8001cd6 <_free_r+0x42>
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	1821      	adds	r1, r4, r0
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	bf01      	itttt	eq
 8001ccc:	6819      	ldreq	r1, [r3, #0]
 8001cce:	685b      	ldreq	r3, [r3, #4]
 8001cd0:	1809      	addeq	r1, r1, r0
 8001cd2:	6021      	streq	r1, [r4, #0]
 8001cd4:	e7ed      	b.n	8001cb2 <_free_r+0x1e>
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	b10b      	cbz	r3, 8001ce0 <_free_r+0x4c>
 8001cdc:	42a3      	cmp	r3, r4
 8001cde:	d9fa      	bls.n	8001cd6 <_free_r+0x42>
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	1850      	adds	r0, r2, r1
 8001ce4:	42a0      	cmp	r0, r4
 8001ce6:	d10b      	bne.n	8001d00 <_free_r+0x6c>
 8001ce8:	6820      	ldr	r0, [r4, #0]
 8001cea:	4401      	add	r1, r0
 8001cec:	1850      	adds	r0, r2, r1
 8001cee:	4283      	cmp	r3, r0
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	d1e0      	bne.n	8001cb6 <_free_r+0x22>
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	6053      	str	r3, [r2, #4]
 8001cfa:	4408      	add	r0, r1
 8001cfc:	6010      	str	r0, [r2, #0]
 8001cfe:	e7da      	b.n	8001cb6 <_free_r+0x22>
 8001d00:	d902      	bls.n	8001d08 <_free_r+0x74>
 8001d02:	230c      	movs	r3, #12
 8001d04:	602b      	str	r3, [r5, #0]
 8001d06:	e7d6      	b.n	8001cb6 <_free_r+0x22>
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	1821      	adds	r1, r4, r0
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	bf04      	itt	eq
 8001d10:	6819      	ldreq	r1, [r3, #0]
 8001d12:	685b      	ldreq	r3, [r3, #4]
 8001d14:	6063      	str	r3, [r4, #4]
 8001d16:	bf04      	itt	eq
 8001d18:	1809      	addeq	r1, r1, r0
 8001d1a:	6021      	streq	r1, [r4, #0]
 8001d1c:	6054      	str	r4, [r2, #4]
 8001d1e:	e7ca      	b.n	8001cb6 <_free_r+0x22>
 8001d20:	bd38      	pop	{r3, r4, r5, pc}
 8001d22:	bf00      	nop
 8001d24:	20000210 	.word	0x20000210

08001d28 <sbrk_aligned>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8001d68 <sbrk_aligned+0x40>)
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	6831      	ldr	r1, [r6, #0]
 8001d30:	4605      	mov	r5, r0
 8001d32:	b911      	cbnz	r1, 8001d3a <sbrk_aligned+0x12>
 8001d34:	f000 fcda 	bl	80026ec <_sbrk_r>
 8001d38:	6030      	str	r0, [r6, #0]
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f000 fcd5 	bl	80026ec <_sbrk_r>
 8001d42:	1c43      	adds	r3, r0, #1
 8001d44:	d103      	bne.n	8001d4e <sbrk_aligned+0x26>
 8001d46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
 8001d4e:	1cc4      	adds	r4, r0, #3
 8001d50:	f024 0403 	bic.w	r4, r4, #3
 8001d54:	42a0      	cmp	r0, r4
 8001d56:	d0f8      	beq.n	8001d4a <sbrk_aligned+0x22>
 8001d58:	1a21      	subs	r1, r4, r0
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	f000 fcc6 	bl	80026ec <_sbrk_r>
 8001d60:	3001      	adds	r0, #1
 8001d62:	d1f2      	bne.n	8001d4a <sbrk_aligned+0x22>
 8001d64:	e7ef      	b.n	8001d46 <sbrk_aligned+0x1e>
 8001d66:	bf00      	nop
 8001d68:	2000020c 	.word	0x2000020c

08001d6c <_malloc_r>:
 8001d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d70:	1ccd      	adds	r5, r1, #3
 8001d72:	f025 0503 	bic.w	r5, r5, #3
 8001d76:	3508      	adds	r5, #8
 8001d78:	2d0c      	cmp	r5, #12
 8001d7a:	bf38      	it	cc
 8001d7c:	250c      	movcc	r5, #12
 8001d7e:	2d00      	cmp	r5, #0
 8001d80:	4606      	mov	r6, r0
 8001d82:	db01      	blt.n	8001d88 <_malloc_r+0x1c>
 8001d84:	42a9      	cmp	r1, r5
 8001d86:	d904      	bls.n	8001d92 <_malloc_r+0x26>
 8001d88:	230c      	movs	r3, #12
 8001d8a:	6033      	str	r3, [r6, #0]
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e68 <_malloc_r+0xfc>
 8001d96:	f000 f869 	bl	8001e6c <__malloc_lock>
 8001d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d9e:	461c      	mov	r4, r3
 8001da0:	bb44      	cbnz	r4, 8001df4 <_malloc_r+0x88>
 8001da2:	4629      	mov	r1, r5
 8001da4:	4630      	mov	r0, r6
 8001da6:	f7ff ffbf 	bl	8001d28 <sbrk_aligned>
 8001daa:	1c43      	adds	r3, r0, #1
 8001dac:	4604      	mov	r4, r0
 8001dae:	d158      	bne.n	8001e62 <_malloc_r+0xf6>
 8001db0:	f8d8 4000 	ldr.w	r4, [r8]
 8001db4:	4627      	mov	r7, r4
 8001db6:	2f00      	cmp	r7, #0
 8001db8:	d143      	bne.n	8001e42 <_malloc_r+0xd6>
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	d04b      	beq.n	8001e56 <_malloc_r+0xea>
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	4639      	mov	r1, r7
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	eb04 0903 	add.w	r9, r4, r3
 8001dc8:	f000 fc90 	bl	80026ec <_sbrk_r>
 8001dcc:	4581      	cmp	r9, r0
 8001dce:	d142      	bne.n	8001e56 <_malloc_r+0xea>
 8001dd0:	6821      	ldr	r1, [r4, #0]
 8001dd2:	1a6d      	subs	r5, r5, r1
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff ffa6 	bl	8001d28 <sbrk_aligned>
 8001ddc:	3001      	adds	r0, #1
 8001dde:	d03a      	beq.n	8001e56 <_malloc_r+0xea>
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	442b      	add	r3, r5
 8001de4:	6023      	str	r3, [r4, #0]
 8001de6:	f8d8 3000 	ldr.w	r3, [r8]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	bb62      	cbnz	r2, 8001e48 <_malloc_r+0xdc>
 8001dee:	f8c8 7000 	str.w	r7, [r8]
 8001df2:	e00f      	b.n	8001e14 <_malloc_r+0xa8>
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	1b52      	subs	r2, r2, r5
 8001df8:	d420      	bmi.n	8001e3c <_malloc_r+0xd0>
 8001dfa:	2a0b      	cmp	r2, #11
 8001dfc:	d917      	bls.n	8001e2e <_malloc_r+0xc2>
 8001dfe:	1961      	adds	r1, r4, r5
 8001e00:	42a3      	cmp	r3, r4
 8001e02:	6025      	str	r5, [r4, #0]
 8001e04:	bf18      	it	ne
 8001e06:	6059      	strne	r1, [r3, #4]
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	bf08      	it	eq
 8001e0c:	f8c8 1000 	streq.w	r1, [r8]
 8001e10:	5162      	str	r2, [r4, r5]
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	4630      	mov	r0, r6
 8001e16:	f000 f82f 	bl	8001e78 <__malloc_unlock>
 8001e1a:	f104 000b 	add.w	r0, r4, #11
 8001e1e:	1d23      	adds	r3, r4, #4
 8001e20:	f020 0007 	bic.w	r0, r0, #7
 8001e24:	1ac2      	subs	r2, r0, r3
 8001e26:	bf1c      	itt	ne
 8001e28:	1a1b      	subne	r3, r3, r0
 8001e2a:	50a3      	strne	r3, [r4, r2]
 8001e2c:	e7af      	b.n	8001d8e <_malloc_r+0x22>
 8001e2e:	6862      	ldr	r2, [r4, #4]
 8001e30:	42a3      	cmp	r3, r4
 8001e32:	bf0c      	ite	eq
 8001e34:	f8c8 2000 	streq.w	r2, [r8]
 8001e38:	605a      	strne	r2, [r3, #4]
 8001e3a:	e7eb      	b.n	8001e14 <_malloc_r+0xa8>
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	6864      	ldr	r4, [r4, #4]
 8001e40:	e7ae      	b.n	8001da0 <_malloc_r+0x34>
 8001e42:	463c      	mov	r4, r7
 8001e44:	687f      	ldr	r7, [r7, #4]
 8001e46:	e7b6      	b.n	8001db6 <_malloc_r+0x4a>
 8001e48:	461a      	mov	r2, r3
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	d1fb      	bne.n	8001e48 <_malloc_r+0xdc>
 8001e50:	2300      	movs	r3, #0
 8001e52:	6053      	str	r3, [r2, #4]
 8001e54:	e7de      	b.n	8001e14 <_malloc_r+0xa8>
 8001e56:	230c      	movs	r3, #12
 8001e58:	6033      	str	r3, [r6, #0]
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f000 f80c 	bl	8001e78 <__malloc_unlock>
 8001e60:	e794      	b.n	8001d8c <_malloc_r+0x20>
 8001e62:	6005      	str	r5, [r0, #0]
 8001e64:	e7d6      	b.n	8001e14 <_malloc_r+0xa8>
 8001e66:	bf00      	nop
 8001e68:	20000210 	.word	0x20000210

08001e6c <__malloc_lock>:
 8001e6c:	4801      	ldr	r0, [pc, #4]	@ (8001e74 <__malloc_lock+0x8>)
 8001e6e:	f7ff bf0e 	b.w	8001c8e <__retarget_lock_acquire_recursive>
 8001e72:	bf00      	nop
 8001e74:	20000208 	.word	0x20000208

08001e78 <__malloc_unlock>:
 8001e78:	4801      	ldr	r0, [pc, #4]	@ (8001e80 <__malloc_unlock+0x8>)
 8001e7a:	f7ff bf09 	b.w	8001c90 <__retarget_lock_release_recursive>
 8001e7e:	bf00      	nop
 8001e80:	20000208 	.word	0x20000208

08001e84 <__sfputc_r>:
 8001e84:	6893      	ldr	r3, [r2, #8]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	b410      	push	{r4}
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	da08      	bge.n	8001ea2 <__sfputc_r+0x1e>
 8001e90:	6994      	ldr	r4, [r2, #24]
 8001e92:	42a3      	cmp	r3, r4
 8001e94:	db01      	blt.n	8001e9a <__sfputc_r+0x16>
 8001e96:	290a      	cmp	r1, #10
 8001e98:	d103      	bne.n	8001ea2 <__sfputc_r+0x1e>
 8001e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e9e:	f7ff bde8 	b.w	8001a72 <__swbuf_r>
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	1c58      	adds	r0, r3, #1
 8001ea6:	6010      	str	r0, [r2, #0]
 8001ea8:	7019      	strb	r1, [r3, #0]
 8001eaa:	4608      	mov	r0, r1
 8001eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <__sfputs_r>:
 8001eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb4:	4606      	mov	r6, r0
 8001eb6:	460f      	mov	r7, r1
 8001eb8:	4614      	mov	r4, r2
 8001eba:	18d5      	adds	r5, r2, r3
 8001ebc:	42ac      	cmp	r4, r5
 8001ebe:	d101      	bne.n	8001ec4 <__sfputs_r+0x12>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e007      	b.n	8001ed4 <__sfputs_r+0x22>
 8001ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ec8:	463a      	mov	r2, r7
 8001eca:	4630      	mov	r0, r6
 8001ecc:	f7ff ffda 	bl	8001e84 <__sfputc_r>
 8001ed0:	1c43      	adds	r3, r0, #1
 8001ed2:	d1f3      	bne.n	8001ebc <__sfputs_r+0xa>
 8001ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ed8 <_vfiprintf_r>:
 8001ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001edc:	460d      	mov	r5, r1
 8001ede:	b09d      	sub	sp, #116	@ 0x74
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	4698      	mov	r8, r3
 8001ee4:	4606      	mov	r6, r0
 8001ee6:	b118      	cbz	r0, 8001ef0 <_vfiprintf_r+0x18>
 8001ee8:	6a03      	ldr	r3, [r0, #32]
 8001eea:	b90b      	cbnz	r3, 8001ef0 <_vfiprintf_r+0x18>
 8001eec:	f7ff fcd0 	bl	8001890 <__sinit>
 8001ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ef2:	07d9      	lsls	r1, r3, #31
 8001ef4:	d405      	bmi.n	8001f02 <_vfiprintf_r+0x2a>
 8001ef6:	89ab      	ldrh	r3, [r5, #12]
 8001ef8:	059a      	lsls	r2, r3, #22
 8001efa:	d402      	bmi.n	8001f02 <_vfiprintf_r+0x2a>
 8001efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001efe:	f7ff fec6 	bl	8001c8e <__retarget_lock_acquire_recursive>
 8001f02:	89ab      	ldrh	r3, [r5, #12]
 8001f04:	071b      	lsls	r3, r3, #28
 8001f06:	d501      	bpl.n	8001f0c <_vfiprintf_r+0x34>
 8001f08:	692b      	ldr	r3, [r5, #16]
 8001f0a:	b99b      	cbnz	r3, 8001f34 <_vfiprintf_r+0x5c>
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f7ff fdee 	bl	8001af0 <__swsetup_r>
 8001f14:	b170      	cbz	r0, 8001f34 <_vfiprintf_r+0x5c>
 8001f16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f18:	07dc      	lsls	r4, r3, #31
 8001f1a:	d504      	bpl.n	8001f26 <_vfiprintf_r+0x4e>
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f20:	b01d      	add	sp, #116	@ 0x74
 8001f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f26:	89ab      	ldrh	r3, [r5, #12]
 8001f28:	0598      	lsls	r0, r3, #22
 8001f2a:	d4f7      	bmi.n	8001f1c <_vfiprintf_r+0x44>
 8001f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f2e:	f7ff feaf 	bl	8001c90 <__retarget_lock_release_recursive>
 8001f32:	e7f3      	b.n	8001f1c <_vfiprintf_r+0x44>
 8001f34:	2300      	movs	r3, #0
 8001f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f38:	2320      	movs	r3, #32
 8001f3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f42:	2330      	movs	r3, #48	@ 0x30
 8001f44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80020f4 <_vfiprintf_r+0x21c>
 8001f48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f4c:	f04f 0901 	mov.w	r9, #1
 8001f50:	4623      	mov	r3, r4
 8001f52:	469a      	mov	sl, r3
 8001f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f58:	b10a      	cbz	r2, 8001f5e <_vfiprintf_r+0x86>
 8001f5a:	2a25      	cmp	r2, #37	@ 0x25
 8001f5c:	d1f9      	bne.n	8001f52 <_vfiprintf_r+0x7a>
 8001f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8001f62:	d00b      	beq.n	8001f7c <_vfiprintf_r+0xa4>
 8001f64:	465b      	mov	r3, fp
 8001f66:	4622      	mov	r2, r4
 8001f68:	4629      	mov	r1, r5
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f7ff ffa1 	bl	8001eb2 <__sfputs_r>
 8001f70:	3001      	adds	r0, #1
 8001f72:	f000 80a7 	beq.w	80020c4 <_vfiprintf_r+0x1ec>
 8001f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f78:	445a      	add	r2, fp
 8001f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 809f 	beq.w	80020c4 <_vfiprintf_r+0x1ec>
 8001f86:	2300      	movs	r3, #0
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f90:	f10a 0a01 	add.w	sl, sl, #1
 8001f94:	9304      	str	r3, [sp, #16]
 8001f96:	9307      	str	r3, [sp, #28]
 8001f98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f9e:	4654      	mov	r4, sl
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fa6:	4853      	ldr	r0, [pc, #332]	@ (80020f4 <_vfiprintf_r+0x21c>)
 8001fa8:	f7fe f912 	bl	80001d0 <memchr>
 8001fac:	9a04      	ldr	r2, [sp, #16]
 8001fae:	b9d8      	cbnz	r0, 8001fe8 <_vfiprintf_r+0x110>
 8001fb0:	06d1      	lsls	r1, r2, #27
 8001fb2:	bf44      	itt	mi
 8001fb4:	2320      	movmi	r3, #32
 8001fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fba:	0713      	lsls	r3, r2, #28
 8001fbc:	bf44      	itt	mi
 8001fbe:	232b      	movmi	r3, #43	@ 0x2b
 8001fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8001fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fca:	d015      	beq.n	8001ff8 <_vfiprintf_r+0x120>
 8001fcc:	9a07      	ldr	r2, [sp, #28]
 8001fce:	4654      	mov	r4, sl
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f04f 0c0a 	mov.w	ip, #10
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fdc:	3b30      	subs	r3, #48	@ 0x30
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	d94b      	bls.n	800207a <_vfiprintf_r+0x1a2>
 8001fe2:	b1b0      	cbz	r0, 8002012 <_vfiprintf_r+0x13a>
 8001fe4:	9207      	str	r2, [sp, #28]
 8001fe6:	e014      	b.n	8002012 <_vfiprintf_r+0x13a>
 8001fe8:	eba0 0308 	sub.w	r3, r0, r8
 8001fec:	fa09 f303 	lsl.w	r3, r9, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	9304      	str	r3, [sp, #16]
 8001ff4:	46a2      	mov	sl, r4
 8001ff6:	e7d2      	b.n	8001f9e <_vfiprintf_r+0xc6>
 8001ff8:	9b03      	ldr	r3, [sp, #12]
 8001ffa:	1d19      	adds	r1, r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	9103      	str	r1, [sp, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	bfbb      	ittet	lt
 8002004:	425b      	neglt	r3, r3
 8002006:	f042 0202 	orrlt.w	r2, r2, #2
 800200a:	9307      	strge	r3, [sp, #28]
 800200c:	9307      	strlt	r3, [sp, #28]
 800200e:	bfb8      	it	lt
 8002010:	9204      	strlt	r2, [sp, #16]
 8002012:	7823      	ldrb	r3, [r4, #0]
 8002014:	2b2e      	cmp	r3, #46	@ 0x2e
 8002016:	d10a      	bne.n	800202e <_vfiprintf_r+0x156>
 8002018:	7863      	ldrb	r3, [r4, #1]
 800201a:	2b2a      	cmp	r3, #42	@ 0x2a
 800201c:	d132      	bne.n	8002084 <_vfiprintf_r+0x1ac>
 800201e:	9b03      	ldr	r3, [sp, #12]
 8002020:	1d1a      	adds	r2, r3, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	9203      	str	r2, [sp, #12]
 8002026:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800202a:	3402      	adds	r4, #2
 800202c:	9305      	str	r3, [sp, #20]
 800202e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002104 <_vfiprintf_r+0x22c>
 8002032:	7821      	ldrb	r1, [r4, #0]
 8002034:	2203      	movs	r2, #3
 8002036:	4650      	mov	r0, sl
 8002038:	f7fe f8ca 	bl	80001d0 <memchr>
 800203c:	b138      	cbz	r0, 800204e <_vfiprintf_r+0x176>
 800203e:	9b04      	ldr	r3, [sp, #16]
 8002040:	eba0 000a 	sub.w	r0, r0, sl
 8002044:	2240      	movs	r2, #64	@ 0x40
 8002046:	4082      	lsls	r2, r0
 8002048:	4313      	orrs	r3, r2
 800204a:	3401      	adds	r4, #1
 800204c:	9304      	str	r3, [sp, #16]
 800204e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002052:	4829      	ldr	r0, [pc, #164]	@ (80020f8 <_vfiprintf_r+0x220>)
 8002054:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002058:	2206      	movs	r2, #6
 800205a:	f7fe f8b9 	bl	80001d0 <memchr>
 800205e:	2800      	cmp	r0, #0
 8002060:	d03f      	beq.n	80020e2 <_vfiprintf_r+0x20a>
 8002062:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <_vfiprintf_r+0x224>)
 8002064:	bb1b      	cbnz	r3, 80020ae <_vfiprintf_r+0x1d6>
 8002066:	9b03      	ldr	r3, [sp, #12]
 8002068:	3307      	adds	r3, #7
 800206a:	f023 0307 	bic.w	r3, r3, #7
 800206e:	3308      	adds	r3, #8
 8002070:	9303      	str	r3, [sp, #12]
 8002072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002074:	443b      	add	r3, r7
 8002076:	9309      	str	r3, [sp, #36]	@ 0x24
 8002078:	e76a      	b.n	8001f50 <_vfiprintf_r+0x78>
 800207a:	fb0c 3202 	mla	r2, ip, r2, r3
 800207e:	460c      	mov	r4, r1
 8002080:	2001      	movs	r0, #1
 8002082:	e7a8      	b.n	8001fd6 <_vfiprintf_r+0xfe>
 8002084:	2300      	movs	r3, #0
 8002086:	3401      	adds	r4, #1
 8002088:	9305      	str	r3, [sp, #20]
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 0c0a 	mov.w	ip, #10
 8002090:	4620      	mov	r0, r4
 8002092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002096:	3a30      	subs	r2, #48	@ 0x30
 8002098:	2a09      	cmp	r2, #9
 800209a:	d903      	bls.n	80020a4 <_vfiprintf_r+0x1cc>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0c6      	beq.n	800202e <_vfiprintf_r+0x156>
 80020a0:	9105      	str	r1, [sp, #20]
 80020a2:	e7c4      	b.n	800202e <_vfiprintf_r+0x156>
 80020a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80020a8:	4604      	mov	r4, r0
 80020aa:	2301      	movs	r3, #1
 80020ac:	e7f0      	b.n	8002090 <_vfiprintf_r+0x1b8>
 80020ae:	ab03      	add	r3, sp, #12
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	462a      	mov	r2, r5
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <_vfiprintf_r+0x228>)
 80020b6:	a904      	add	r1, sp, #16
 80020b8:	4630      	mov	r0, r6
 80020ba:	f3af 8000 	nop.w
 80020be:	4607      	mov	r7, r0
 80020c0:	1c78      	adds	r0, r7, #1
 80020c2:	d1d6      	bne.n	8002072 <_vfiprintf_r+0x19a>
 80020c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020c6:	07d9      	lsls	r1, r3, #31
 80020c8:	d405      	bmi.n	80020d6 <_vfiprintf_r+0x1fe>
 80020ca:	89ab      	ldrh	r3, [r5, #12]
 80020cc:	059a      	lsls	r2, r3, #22
 80020ce:	d402      	bmi.n	80020d6 <_vfiprintf_r+0x1fe>
 80020d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020d2:	f7ff fddd 	bl	8001c90 <__retarget_lock_release_recursive>
 80020d6:	89ab      	ldrh	r3, [r5, #12]
 80020d8:	065b      	lsls	r3, r3, #25
 80020da:	f53f af1f 	bmi.w	8001f1c <_vfiprintf_r+0x44>
 80020de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020e0:	e71e      	b.n	8001f20 <_vfiprintf_r+0x48>
 80020e2:	ab03      	add	r3, sp, #12
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	462a      	mov	r2, r5
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <_vfiprintf_r+0x228>)
 80020ea:	a904      	add	r1, sp, #16
 80020ec:	4630      	mov	r0, r6
 80020ee:	f000 f879 	bl	80021e4 <_printf_i>
 80020f2:	e7e4      	b.n	80020be <_vfiprintf_r+0x1e6>
 80020f4:	0800272f 	.word	0x0800272f
 80020f8:	08002739 	.word	0x08002739
 80020fc:	00000000 	.word	0x00000000
 8002100:	08001eb3 	.word	0x08001eb3
 8002104:	08002735 	.word	0x08002735

08002108 <_printf_common>:
 8002108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800210c:	4616      	mov	r6, r2
 800210e:	4698      	mov	r8, r3
 8002110:	688a      	ldr	r2, [r1, #8]
 8002112:	690b      	ldr	r3, [r1, #16]
 8002114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002118:	4293      	cmp	r3, r2
 800211a:	bfb8      	it	lt
 800211c:	4613      	movlt	r3, r2
 800211e:	6033      	str	r3, [r6, #0]
 8002120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002124:	4607      	mov	r7, r0
 8002126:	460c      	mov	r4, r1
 8002128:	b10a      	cbz	r2, 800212e <_printf_common+0x26>
 800212a:	3301      	adds	r3, #1
 800212c:	6033      	str	r3, [r6, #0]
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	0699      	lsls	r1, r3, #26
 8002132:	bf42      	ittt	mi
 8002134:	6833      	ldrmi	r3, [r6, #0]
 8002136:	3302      	addmi	r3, #2
 8002138:	6033      	strmi	r3, [r6, #0]
 800213a:	6825      	ldr	r5, [r4, #0]
 800213c:	f015 0506 	ands.w	r5, r5, #6
 8002140:	d106      	bne.n	8002150 <_printf_common+0x48>
 8002142:	f104 0a19 	add.w	sl, r4, #25
 8002146:	68e3      	ldr	r3, [r4, #12]
 8002148:	6832      	ldr	r2, [r6, #0]
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	42ab      	cmp	r3, r5
 800214e:	dc26      	bgt.n	800219e <_printf_common+0x96>
 8002150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	3b00      	subs	r3, #0
 8002158:	bf18      	it	ne
 800215a:	2301      	movne	r3, #1
 800215c:	0692      	lsls	r2, r2, #26
 800215e:	d42b      	bmi.n	80021b8 <_printf_common+0xb0>
 8002160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002164:	4641      	mov	r1, r8
 8002166:	4638      	mov	r0, r7
 8002168:	47c8      	blx	r9
 800216a:	3001      	adds	r0, #1
 800216c:	d01e      	beq.n	80021ac <_printf_common+0xa4>
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	6922      	ldr	r2, [r4, #16]
 8002172:	f003 0306 	and.w	r3, r3, #6
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf02      	ittt	eq
 800217a:	68e5      	ldreq	r5, [r4, #12]
 800217c:	6833      	ldreq	r3, [r6, #0]
 800217e:	1aed      	subeq	r5, r5, r3
 8002180:	68a3      	ldr	r3, [r4, #8]
 8002182:	bf0c      	ite	eq
 8002184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002188:	2500      	movne	r5, #0
 800218a:	4293      	cmp	r3, r2
 800218c:	bfc4      	itt	gt
 800218e:	1a9b      	subgt	r3, r3, r2
 8002190:	18ed      	addgt	r5, r5, r3
 8002192:	2600      	movs	r6, #0
 8002194:	341a      	adds	r4, #26
 8002196:	42b5      	cmp	r5, r6
 8002198:	d11a      	bne.n	80021d0 <_printf_common+0xc8>
 800219a:	2000      	movs	r0, #0
 800219c:	e008      	b.n	80021b0 <_printf_common+0xa8>
 800219e:	2301      	movs	r3, #1
 80021a0:	4652      	mov	r2, sl
 80021a2:	4641      	mov	r1, r8
 80021a4:	4638      	mov	r0, r7
 80021a6:	47c8      	blx	r9
 80021a8:	3001      	adds	r0, #1
 80021aa:	d103      	bne.n	80021b4 <_printf_common+0xac>
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b4:	3501      	adds	r5, #1
 80021b6:	e7c6      	b.n	8002146 <_printf_common+0x3e>
 80021b8:	18e1      	adds	r1, r4, r3
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	2030      	movs	r0, #48	@ 0x30
 80021be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80021c2:	4422      	add	r2, r4
 80021c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021cc:	3302      	adds	r3, #2
 80021ce:	e7c7      	b.n	8002160 <_printf_common+0x58>
 80021d0:	2301      	movs	r3, #1
 80021d2:	4622      	mov	r2, r4
 80021d4:	4641      	mov	r1, r8
 80021d6:	4638      	mov	r0, r7
 80021d8:	47c8      	blx	r9
 80021da:	3001      	adds	r0, #1
 80021dc:	d0e6      	beq.n	80021ac <_printf_common+0xa4>
 80021de:	3601      	adds	r6, #1
 80021e0:	e7d9      	b.n	8002196 <_printf_common+0x8e>
	...

080021e4 <_printf_i>:
 80021e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021e8:	7e0f      	ldrb	r7, [r1, #24]
 80021ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021ec:	2f78      	cmp	r7, #120	@ 0x78
 80021ee:	4691      	mov	r9, r2
 80021f0:	4680      	mov	r8, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	469a      	mov	sl, r3
 80021f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021fa:	d807      	bhi.n	800220c <_printf_i+0x28>
 80021fc:	2f62      	cmp	r7, #98	@ 0x62
 80021fe:	d80a      	bhi.n	8002216 <_printf_i+0x32>
 8002200:	2f00      	cmp	r7, #0
 8002202:	f000 80d2 	beq.w	80023aa <_printf_i+0x1c6>
 8002206:	2f58      	cmp	r7, #88	@ 0x58
 8002208:	f000 80b9 	beq.w	800237e <_printf_i+0x19a>
 800220c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002214:	e03a      	b.n	800228c <_printf_i+0xa8>
 8002216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800221a:	2b15      	cmp	r3, #21
 800221c:	d8f6      	bhi.n	800220c <_printf_i+0x28>
 800221e:	a101      	add	r1, pc, #4	@ (adr r1, 8002224 <_printf_i+0x40>)
 8002220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002224:	0800227d 	.word	0x0800227d
 8002228:	08002291 	.word	0x08002291
 800222c:	0800220d 	.word	0x0800220d
 8002230:	0800220d 	.word	0x0800220d
 8002234:	0800220d 	.word	0x0800220d
 8002238:	0800220d 	.word	0x0800220d
 800223c:	08002291 	.word	0x08002291
 8002240:	0800220d 	.word	0x0800220d
 8002244:	0800220d 	.word	0x0800220d
 8002248:	0800220d 	.word	0x0800220d
 800224c:	0800220d 	.word	0x0800220d
 8002250:	08002391 	.word	0x08002391
 8002254:	080022bb 	.word	0x080022bb
 8002258:	0800234b 	.word	0x0800234b
 800225c:	0800220d 	.word	0x0800220d
 8002260:	0800220d 	.word	0x0800220d
 8002264:	080023b3 	.word	0x080023b3
 8002268:	0800220d 	.word	0x0800220d
 800226c:	080022bb 	.word	0x080022bb
 8002270:	0800220d 	.word	0x0800220d
 8002274:	0800220d 	.word	0x0800220d
 8002278:	08002353 	.word	0x08002353
 800227c:	6833      	ldr	r3, [r6, #0]
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6032      	str	r2, [r6, #0]
 8002284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800228c:	2301      	movs	r3, #1
 800228e:	e09d      	b.n	80023cc <_printf_i+0x1e8>
 8002290:	6833      	ldr	r3, [r6, #0]
 8002292:	6820      	ldr	r0, [r4, #0]
 8002294:	1d19      	adds	r1, r3, #4
 8002296:	6031      	str	r1, [r6, #0]
 8002298:	0606      	lsls	r6, r0, #24
 800229a:	d501      	bpl.n	80022a0 <_printf_i+0xbc>
 800229c:	681d      	ldr	r5, [r3, #0]
 800229e:	e003      	b.n	80022a8 <_printf_i+0xc4>
 80022a0:	0645      	lsls	r5, r0, #25
 80022a2:	d5fb      	bpl.n	800229c <_printf_i+0xb8>
 80022a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	da03      	bge.n	80022b4 <_printf_i+0xd0>
 80022ac:	232d      	movs	r3, #45	@ 0x2d
 80022ae:	426d      	negs	r5, r5
 80022b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022b4:	4859      	ldr	r0, [pc, #356]	@ (800241c <_printf_i+0x238>)
 80022b6:	230a      	movs	r3, #10
 80022b8:	e011      	b.n	80022de <_printf_i+0xfa>
 80022ba:	6821      	ldr	r1, [r4, #0]
 80022bc:	6833      	ldr	r3, [r6, #0]
 80022be:	0608      	lsls	r0, r1, #24
 80022c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80022c4:	d402      	bmi.n	80022cc <_printf_i+0xe8>
 80022c6:	0649      	lsls	r1, r1, #25
 80022c8:	bf48      	it	mi
 80022ca:	b2ad      	uxthmi	r5, r5
 80022cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80022ce:	4853      	ldr	r0, [pc, #332]	@ (800241c <_printf_i+0x238>)
 80022d0:	6033      	str	r3, [r6, #0]
 80022d2:	bf14      	ite	ne
 80022d4:	230a      	movne	r3, #10
 80022d6:	2308      	moveq	r3, #8
 80022d8:	2100      	movs	r1, #0
 80022da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022de:	6866      	ldr	r6, [r4, #4]
 80022e0:	60a6      	str	r6, [r4, #8]
 80022e2:	2e00      	cmp	r6, #0
 80022e4:	bfa2      	ittt	ge
 80022e6:	6821      	ldrge	r1, [r4, #0]
 80022e8:	f021 0104 	bicge.w	r1, r1, #4
 80022ec:	6021      	strge	r1, [r4, #0]
 80022ee:	b90d      	cbnz	r5, 80022f4 <_printf_i+0x110>
 80022f0:	2e00      	cmp	r6, #0
 80022f2:	d04b      	beq.n	800238c <_printf_i+0x1a8>
 80022f4:	4616      	mov	r6, r2
 80022f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80022fa:	fb03 5711 	mls	r7, r3, r1, r5
 80022fe:	5dc7      	ldrb	r7, [r0, r7]
 8002300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002304:	462f      	mov	r7, r5
 8002306:	42bb      	cmp	r3, r7
 8002308:	460d      	mov	r5, r1
 800230a:	d9f4      	bls.n	80022f6 <_printf_i+0x112>
 800230c:	2b08      	cmp	r3, #8
 800230e:	d10b      	bne.n	8002328 <_printf_i+0x144>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	07df      	lsls	r7, r3, #31
 8002314:	d508      	bpl.n	8002328 <_printf_i+0x144>
 8002316:	6923      	ldr	r3, [r4, #16]
 8002318:	6861      	ldr	r1, [r4, #4]
 800231a:	4299      	cmp	r1, r3
 800231c:	bfde      	ittt	le
 800231e:	2330      	movle	r3, #48	@ 0x30
 8002320:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002324:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002328:	1b92      	subs	r2, r2, r6
 800232a:	6122      	str	r2, [r4, #16]
 800232c:	f8cd a000 	str.w	sl, [sp]
 8002330:	464b      	mov	r3, r9
 8002332:	aa03      	add	r2, sp, #12
 8002334:	4621      	mov	r1, r4
 8002336:	4640      	mov	r0, r8
 8002338:	f7ff fee6 	bl	8002108 <_printf_common>
 800233c:	3001      	adds	r0, #1
 800233e:	d14a      	bne.n	80023d6 <_printf_i+0x1f2>
 8002340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002344:	b004      	add	sp, #16
 8002346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	f043 0320 	orr.w	r3, r3, #32
 8002350:	6023      	str	r3, [r4, #0]
 8002352:	4833      	ldr	r0, [pc, #204]	@ (8002420 <_printf_i+0x23c>)
 8002354:	2778      	movs	r7, #120	@ 0x78
 8002356:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	6831      	ldr	r1, [r6, #0]
 800235e:	061f      	lsls	r7, r3, #24
 8002360:	f851 5b04 	ldr.w	r5, [r1], #4
 8002364:	d402      	bmi.n	800236c <_printf_i+0x188>
 8002366:	065f      	lsls	r7, r3, #25
 8002368:	bf48      	it	mi
 800236a:	b2ad      	uxthmi	r5, r5
 800236c:	6031      	str	r1, [r6, #0]
 800236e:	07d9      	lsls	r1, r3, #31
 8002370:	bf44      	itt	mi
 8002372:	f043 0320 	orrmi.w	r3, r3, #32
 8002376:	6023      	strmi	r3, [r4, #0]
 8002378:	b11d      	cbz	r5, 8002382 <_printf_i+0x19e>
 800237a:	2310      	movs	r3, #16
 800237c:	e7ac      	b.n	80022d8 <_printf_i+0xf4>
 800237e:	4827      	ldr	r0, [pc, #156]	@ (800241c <_printf_i+0x238>)
 8002380:	e7e9      	b.n	8002356 <_printf_i+0x172>
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	f023 0320 	bic.w	r3, r3, #32
 8002388:	6023      	str	r3, [r4, #0]
 800238a:	e7f6      	b.n	800237a <_printf_i+0x196>
 800238c:	4616      	mov	r6, r2
 800238e:	e7bd      	b.n	800230c <_printf_i+0x128>
 8002390:	6833      	ldr	r3, [r6, #0]
 8002392:	6825      	ldr	r5, [r4, #0]
 8002394:	6961      	ldr	r1, [r4, #20]
 8002396:	1d18      	adds	r0, r3, #4
 8002398:	6030      	str	r0, [r6, #0]
 800239a:	062e      	lsls	r6, r5, #24
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	d501      	bpl.n	80023a4 <_printf_i+0x1c0>
 80023a0:	6019      	str	r1, [r3, #0]
 80023a2:	e002      	b.n	80023aa <_printf_i+0x1c6>
 80023a4:	0668      	lsls	r0, r5, #25
 80023a6:	d5fb      	bpl.n	80023a0 <_printf_i+0x1bc>
 80023a8:	8019      	strh	r1, [r3, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	6123      	str	r3, [r4, #16]
 80023ae:	4616      	mov	r6, r2
 80023b0:	e7bc      	b.n	800232c <_printf_i+0x148>
 80023b2:	6833      	ldr	r3, [r6, #0]
 80023b4:	1d1a      	adds	r2, r3, #4
 80023b6:	6032      	str	r2, [r6, #0]
 80023b8:	681e      	ldr	r6, [r3, #0]
 80023ba:	6862      	ldr	r2, [r4, #4]
 80023bc:	2100      	movs	r1, #0
 80023be:	4630      	mov	r0, r6
 80023c0:	f7fd ff06 	bl	80001d0 <memchr>
 80023c4:	b108      	cbz	r0, 80023ca <_printf_i+0x1e6>
 80023c6:	1b80      	subs	r0, r0, r6
 80023c8:	6060      	str	r0, [r4, #4]
 80023ca:	6863      	ldr	r3, [r4, #4]
 80023cc:	6123      	str	r3, [r4, #16]
 80023ce:	2300      	movs	r3, #0
 80023d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023d4:	e7aa      	b.n	800232c <_printf_i+0x148>
 80023d6:	6923      	ldr	r3, [r4, #16]
 80023d8:	4632      	mov	r2, r6
 80023da:	4649      	mov	r1, r9
 80023dc:	4640      	mov	r0, r8
 80023de:	47d0      	blx	sl
 80023e0:	3001      	adds	r0, #1
 80023e2:	d0ad      	beq.n	8002340 <_printf_i+0x15c>
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	079b      	lsls	r3, r3, #30
 80023e8:	d413      	bmi.n	8002412 <_printf_i+0x22e>
 80023ea:	68e0      	ldr	r0, [r4, #12]
 80023ec:	9b03      	ldr	r3, [sp, #12]
 80023ee:	4298      	cmp	r0, r3
 80023f0:	bfb8      	it	lt
 80023f2:	4618      	movlt	r0, r3
 80023f4:	e7a6      	b.n	8002344 <_printf_i+0x160>
 80023f6:	2301      	movs	r3, #1
 80023f8:	4632      	mov	r2, r6
 80023fa:	4649      	mov	r1, r9
 80023fc:	4640      	mov	r0, r8
 80023fe:	47d0      	blx	sl
 8002400:	3001      	adds	r0, #1
 8002402:	d09d      	beq.n	8002340 <_printf_i+0x15c>
 8002404:	3501      	adds	r5, #1
 8002406:	68e3      	ldr	r3, [r4, #12]
 8002408:	9903      	ldr	r1, [sp, #12]
 800240a:	1a5b      	subs	r3, r3, r1
 800240c:	42ab      	cmp	r3, r5
 800240e:	dcf2      	bgt.n	80023f6 <_printf_i+0x212>
 8002410:	e7eb      	b.n	80023ea <_printf_i+0x206>
 8002412:	2500      	movs	r5, #0
 8002414:	f104 0619 	add.w	r6, r4, #25
 8002418:	e7f5      	b.n	8002406 <_printf_i+0x222>
 800241a:	bf00      	nop
 800241c:	08002740 	.word	0x08002740
 8002420:	08002751 	.word	0x08002751

08002424 <__sflush_r>:
 8002424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242c:	0716      	lsls	r6, r2, #28
 800242e:	4605      	mov	r5, r0
 8002430:	460c      	mov	r4, r1
 8002432:	d454      	bmi.n	80024de <__sflush_r+0xba>
 8002434:	684b      	ldr	r3, [r1, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	dc02      	bgt.n	8002440 <__sflush_r+0x1c>
 800243a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	dd48      	ble.n	80024d2 <__sflush_r+0xae>
 8002440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002442:	2e00      	cmp	r6, #0
 8002444:	d045      	beq.n	80024d2 <__sflush_r+0xae>
 8002446:	2300      	movs	r3, #0
 8002448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800244c:	682f      	ldr	r7, [r5, #0]
 800244e:	6a21      	ldr	r1, [r4, #32]
 8002450:	602b      	str	r3, [r5, #0]
 8002452:	d030      	beq.n	80024b6 <__sflush_r+0x92>
 8002454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002456:	89a3      	ldrh	r3, [r4, #12]
 8002458:	0759      	lsls	r1, r3, #29
 800245a:	d505      	bpl.n	8002468 <__sflush_r+0x44>
 800245c:	6863      	ldr	r3, [r4, #4]
 800245e:	1ad2      	subs	r2, r2, r3
 8002460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002462:	b10b      	cbz	r3, 8002468 <__sflush_r+0x44>
 8002464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800246c:	6a21      	ldr	r1, [r4, #32]
 800246e:	4628      	mov	r0, r5
 8002470:	47b0      	blx	r6
 8002472:	1c43      	adds	r3, r0, #1
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	d106      	bne.n	8002486 <__sflush_r+0x62>
 8002478:	6829      	ldr	r1, [r5, #0]
 800247a:	291d      	cmp	r1, #29
 800247c:	d82b      	bhi.n	80024d6 <__sflush_r+0xb2>
 800247e:	4a2a      	ldr	r2, [pc, #168]	@ (8002528 <__sflush_r+0x104>)
 8002480:	410a      	asrs	r2, r1
 8002482:	07d6      	lsls	r6, r2, #31
 8002484:	d427      	bmi.n	80024d6 <__sflush_r+0xb2>
 8002486:	2200      	movs	r2, #0
 8002488:	6062      	str	r2, [r4, #4]
 800248a:	04d9      	lsls	r1, r3, #19
 800248c:	6922      	ldr	r2, [r4, #16]
 800248e:	6022      	str	r2, [r4, #0]
 8002490:	d504      	bpl.n	800249c <__sflush_r+0x78>
 8002492:	1c42      	adds	r2, r0, #1
 8002494:	d101      	bne.n	800249a <__sflush_r+0x76>
 8002496:	682b      	ldr	r3, [r5, #0]
 8002498:	b903      	cbnz	r3, 800249c <__sflush_r+0x78>
 800249a:	6560      	str	r0, [r4, #84]	@ 0x54
 800249c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800249e:	602f      	str	r7, [r5, #0]
 80024a0:	b1b9      	cbz	r1, 80024d2 <__sflush_r+0xae>
 80024a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80024a6:	4299      	cmp	r1, r3
 80024a8:	d002      	beq.n	80024b0 <__sflush_r+0x8c>
 80024aa:	4628      	mov	r0, r5
 80024ac:	f7ff fbf2 	bl	8001c94 <_free_r>
 80024b0:	2300      	movs	r3, #0
 80024b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80024b4:	e00d      	b.n	80024d2 <__sflush_r+0xae>
 80024b6:	2301      	movs	r3, #1
 80024b8:	4628      	mov	r0, r5
 80024ba:	47b0      	blx	r6
 80024bc:	4602      	mov	r2, r0
 80024be:	1c50      	adds	r0, r2, #1
 80024c0:	d1c9      	bne.n	8002456 <__sflush_r+0x32>
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0c6      	beq.n	8002456 <__sflush_r+0x32>
 80024c8:	2b1d      	cmp	r3, #29
 80024ca:	d001      	beq.n	80024d0 <__sflush_r+0xac>
 80024cc:	2b16      	cmp	r3, #22
 80024ce:	d11e      	bne.n	800250e <__sflush_r+0xea>
 80024d0:	602f      	str	r7, [r5, #0]
 80024d2:	2000      	movs	r0, #0
 80024d4:	e022      	b.n	800251c <__sflush_r+0xf8>
 80024d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024da:	b21b      	sxth	r3, r3
 80024dc:	e01b      	b.n	8002516 <__sflush_r+0xf2>
 80024de:	690f      	ldr	r7, [r1, #16]
 80024e0:	2f00      	cmp	r7, #0
 80024e2:	d0f6      	beq.n	80024d2 <__sflush_r+0xae>
 80024e4:	0793      	lsls	r3, r2, #30
 80024e6:	680e      	ldr	r6, [r1, #0]
 80024e8:	bf08      	it	eq
 80024ea:	694b      	ldreq	r3, [r1, #20]
 80024ec:	600f      	str	r7, [r1, #0]
 80024ee:	bf18      	it	ne
 80024f0:	2300      	movne	r3, #0
 80024f2:	eba6 0807 	sub.w	r8, r6, r7
 80024f6:	608b      	str	r3, [r1, #8]
 80024f8:	f1b8 0f00 	cmp.w	r8, #0
 80024fc:	dde9      	ble.n	80024d2 <__sflush_r+0xae>
 80024fe:	6a21      	ldr	r1, [r4, #32]
 8002500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002502:	4643      	mov	r3, r8
 8002504:	463a      	mov	r2, r7
 8002506:	4628      	mov	r0, r5
 8002508:	47b0      	blx	r6
 800250a:	2800      	cmp	r0, #0
 800250c:	dc08      	bgt.n	8002520 <__sflush_r+0xfc>
 800250e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002516:	81a3      	strh	r3, [r4, #12]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002520:	4407      	add	r7, r0
 8002522:	eba8 0800 	sub.w	r8, r8, r0
 8002526:	e7e7      	b.n	80024f8 <__sflush_r+0xd4>
 8002528:	dfbffffe 	.word	0xdfbffffe

0800252c <_fflush_r>:
 800252c:	b538      	push	{r3, r4, r5, lr}
 800252e:	690b      	ldr	r3, [r1, #16]
 8002530:	4605      	mov	r5, r0
 8002532:	460c      	mov	r4, r1
 8002534:	b913      	cbnz	r3, 800253c <_fflush_r+0x10>
 8002536:	2500      	movs	r5, #0
 8002538:	4628      	mov	r0, r5
 800253a:	bd38      	pop	{r3, r4, r5, pc}
 800253c:	b118      	cbz	r0, 8002546 <_fflush_r+0x1a>
 800253e:	6a03      	ldr	r3, [r0, #32]
 8002540:	b90b      	cbnz	r3, 8002546 <_fflush_r+0x1a>
 8002542:	f7ff f9a5 	bl	8001890 <__sinit>
 8002546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f3      	beq.n	8002536 <_fflush_r+0xa>
 800254e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002550:	07d0      	lsls	r0, r2, #31
 8002552:	d404      	bmi.n	800255e <_fflush_r+0x32>
 8002554:	0599      	lsls	r1, r3, #22
 8002556:	d402      	bmi.n	800255e <_fflush_r+0x32>
 8002558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800255a:	f7ff fb98 	bl	8001c8e <__retarget_lock_acquire_recursive>
 800255e:	4628      	mov	r0, r5
 8002560:	4621      	mov	r1, r4
 8002562:	f7ff ff5f 	bl	8002424 <__sflush_r>
 8002566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002568:	07da      	lsls	r2, r3, #31
 800256a:	4605      	mov	r5, r0
 800256c:	d4e4      	bmi.n	8002538 <_fflush_r+0xc>
 800256e:	89a3      	ldrh	r3, [r4, #12]
 8002570:	059b      	lsls	r3, r3, #22
 8002572:	d4e1      	bmi.n	8002538 <_fflush_r+0xc>
 8002574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002576:	f7ff fb8b 	bl	8001c90 <__retarget_lock_release_recursive>
 800257a:	e7dd      	b.n	8002538 <_fflush_r+0xc>

0800257c <__swhatbuf_r>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	460c      	mov	r4, r1
 8002580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002584:	2900      	cmp	r1, #0
 8002586:	b096      	sub	sp, #88	@ 0x58
 8002588:	4615      	mov	r5, r2
 800258a:	461e      	mov	r6, r3
 800258c:	da0d      	bge.n	80025aa <__swhatbuf_r+0x2e>
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002594:	f04f 0100 	mov.w	r1, #0
 8002598:	bf14      	ite	ne
 800259a:	2340      	movne	r3, #64	@ 0x40
 800259c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80025a0:	2000      	movs	r0, #0
 80025a2:	6031      	str	r1, [r6, #0]
 80025a4:	602b      	str	r3, [r5, #0]
 80025a6:	b016      	add	sp, #88	@ 0x58
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
 80025aa:	466a      	mov	r2, sp
 80025ac:	f000 f87c 	bl	80026a8 <_fstat_r>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	dbec      	blt.n	800258e <__swhatbuf_r+0x12>
 80025b4:	9901      	ldr	r1, [sp, #4]
 80025b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80025ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80025be:	4259      	negs	r1, r3
 80025c0:	4159      	adcs	r1, r3
 80025c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025c6:	e7eb      	b.n	80025a0 <__swhatbuf_r+0x24>

080025c8 <__smakebuf_r>:
 80025c8:	898b      	ldrh	r3, [r1, #12]
 80025ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025cc:	079d      	lsls	r5, r3, #30
 80025ce:	4606      	mov	r6, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	d507      	bpl.n	80025e4 <__smakebuf_r+0x1c>
 80025d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80025d8:	6023      	str	r3, [r4, #0]
 80025da:	6123      	str	r3, [r4, #16]
 80025dc:	2301      	movs	r3, #1
 80025de:	6163      	str	r3, [r4, #20]
 80025e0:	b003      	add	sp, #12
 80025e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e4:	ab01      	add	r3, sp, #4
 80025e6:	466a      	mov	r2, sp
 80025e8:	f7ff ffc8 	bl	800257c <__swhatbuf_r>
 80025ec:	9f00      	ldr	r7, [sp, #0]
 80025ee:	4605      	mov	r5, r0
 80025f0:	4639      	mov	r1, r7
 80025f2:	4630      	mov	r0, r6
 80025f4:	f7ff fbba 	bl	8001d6c <_malloc_r>
 80025f8:	b948      	cbnz	r0, 800260e <__smakebuf_r+0x46>
 80025fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025fe:	059a      	lsls	r2, r3, #22
 8002600:	d4ee      	bmi.n	80025e0 <__smakebuf_r+0x18>
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	81a3      	strh	r3, [r4, #12]
 800260c:	e7e2      	b.n	80025d4 <__smakebuf_r+0xc>
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	6020      	str	r0, [r4, #0]
 8002612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002616:	81a3      	strh	r3, [r4, #12]
 8002618:	9b01      	ldr	r3, [sp, #4]
 800261a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800261e:	b15b      	cbz	r3, 8002638 <__smakebuf_r+0x70>
 8002620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002624:	4630      	mov	r0, r6
 8002626:	f000 f851 	bl	80026cc <_isatty_r>
 800262a:	b128      	cbz	r0, 8002638 <__smakebuf_r+0x70>
 800262c:	89a3      	ldrh	r3, [r4, #12]
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	81a3      	strh	r3, [r4, #12]
 8002638:	89a3      	ldrh	r3, [r4, #12]
 800263a:	431d      	orrs	r5, r3
 800263c:	81a5      	strh	r5, [r4, #12]
 800263e:	e7cf      	b.n	80025e0 <__smakebuf_r+0x18>

08002640 <_putc_r>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	460d      	mov	r5, r1
 8002644:	4614      	mov	r4, r2
 8002646:	4606      	mov	r6, r0
 8002648:	b118      	cbz	r0, 8002652 <_putc_r+0x12>
 800264a:	6a03      	ldr	r3, [r0, #32]
 800264c:	b90b      	cbnz	r3, 8002652 <_putc_r+0x12>
 800264e:	f7ff f91f 	bl	8001890 <__sinit>
 8002652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002654:	07d8      	lsls	r0, r3, #31
 8002656:	d405      	bmi.n	8002664 <_putc_r+0x24>
 8002658:	89a3      	ldrh	r3, [r4, #12]
 800265a:	0599      	lsls	r1, r3, #22
 800265c:	d402      	bmi.n	8002664 <_putc_r+0x24>
 800265e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002660:	f7ff fb15 	bl	8001c8e <__retarget_lock_acquire_recursive>
 8002664:	68a3      	ldr	r3, [r4, #8]
 8002666:	3b01      	subs	r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	60a3      	str	r3, [r4, #8]
 800266c:	da05      	bge.n	800267a <_putc_r+0x3a>
 800266e:	69a2      	ldr	r2, [r4, #24]
 8002670:	4293      	cmp	r3, r2
 8002672:	db12      	blt.n	800269a <_putc_r+0x5a>
 8002674:	b2eb      	uxtb	r3, r5
 8002676:	2b0a      	cmp	r3, #10
 8002678:	d00f      	beq.n	800269a <_putc_r+0x5a>
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	6022      	str	r2, [r4, #0]
 8002680:	701d      	strb	r5, [r3, #0]
 8002682:	b2ed      	uxtb	r5, r5
 8002684:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002686:	07da      	lsls	r2, r3, #31
 8002688:	d405      	bmi.n	8002696 <_putc_r+0x56>
 800268a:	89a3      	ldrh	r3, [r4, #12]
 800268c:	059b      	lsls	r3, r3, #22
 800268e:	d402      	bmi.n	8002696 <_putc_r+0x56>
 8002690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002692:	f7ff fafd 	bl	8001c90 <__retarget_lock_release_recursive>
 8002696:	4628      	mov	r0, r5
 8002698:	bd70      	pop	{r4, r5, r6, pc}
 800269a:	4629      	mov	r1, r5
 800269c:	4622      	mov	r2, r4
 800269e:	4630      	mov	r0, r6
 80026a0:	f7ff f9e7 	bl	8001a72 <__swbuf_r>
 80026a4:	4605      	mov	r5, r0
 80026a6:	e7ed      	b.n	8002684 <_putc_r+0x44>

080026a8 <_fstat_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4d07      	ldr	r5, [pc, #28]	@ (80026c8 <_fstat_r+0x20>)
 80026ac:	2300      	movs	r3, #0
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	4611      	mov	r1, r2
 80026b4:	602b      	str	r3, [r5, #0]
 80026b6:	f7fd ff36 	bl	8000526 <_fstat>
 80026ba:	1c43      	adds	r3, r0, #1
 80026bc:	d102      	bne.n	80026c4 <_fstat_r+0x1c>
 80026be:	682b      	ldr	r3, [r5, #0]
 80026c0:	b103      	cbz	r3, 80026c4 <_fstat_r+0x1c>
 80026c2:	6023      	str	r3, [r4, #0]
 80026c4:	bd38      	pop	{r3, r4, r5, pc}
 80026c6:	bf00      	nop
 80026c8:	20000204 	.word	0x20000204

080026cc <_isatty_r>:
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	4d06      	ldr	r5, [pc, #24]	@ (80026e8 <_isatty_r+0x1c>)
 80026d0:	2300      	movs	r3, #0
 80026d2:	4604      	mov	r4, r0
 80026d4:	4608      	mov	r0, r1
 80026d6:	602b      	str	r3, [r5, #0]
 80026d8:	f7fd ff35 	bl	8000546 <_isatty>
 80026dc:	1c43      	adds	r3, r0, #1
 80026de:	d102      	bne.n	80026e6 <_isatty_r+0x1a>
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	b103      	cbz	r3, 80026e6 <_isatty_r+0x1a>
 80026e4:	6023      	str	r3, [r4, #0]
 80026e6:	bd38      	pop	{r3, r4, r5, pc}
 80026e8:	20000204 	.word	0x20000204

080026ec <_sbrk_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4d06      	ldr	r5, [pc, #24]	@ (8002708 <_sbrk_r+0x1c>)
 80026f0:	2300      	movs	r3, #0
 80026f2:	4604      	mov	r4, r0
 80026f4:	4608      	mov	r0, r1
 80026f6:	602b      	str	r3, [r5, #0]
 80026f8:	f7fd ff3e 	bl	8000578 <_sbrk>
 80026fc:	1c43      	adds	r3, r0, #1
 80026fe:	d102      	bne.n	8002706 <_sbrk_r+0x1a>
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	b103      	cbz	r3, 8002706 <_sbrk_r+0x1a>
 8002704:	6023      	str	r3, [r4, #0]
 8002706:	bd38      	pop	{r3, r4, r5, pc}
 8002708:	20000204 	.word	0x20000204

0800270c <_init>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr

08002718 <_fini>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr
